{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPKmt/IQ05SVINx0cLNfaiT"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "oKWBRyfb0chq"
      },
      "outputs": [],
      "source": [
        "from sklearn import datasets\n",
        "digits = datasets.load_digits()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(digits.DESCR)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NWWq9xPY1UKK",
        "outputId": "2763f3f3-fd5c-4c15-9361-a02a57d7eae0"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ".. _digits_dataset:\n",
            "\n",
            "Optical recognition of handwritten digits dataset\n",
            "--------------------------------------------------\n",
            "\n",
            "**Data Set Characteristics:**\n",
            "\n",
            ":Number of Instances: 1797\n",
            ":Number of Attributes: 64\n",
            ":Attribute Information: 8x8 image of integer pixels in the range 0..16.\n",
            ":Missing Attribute Values: None\n",
            ":Creator: E. Alpaydin (alpaydin '@' boun.edu.tr)\n",
            ":Date: July; 1998\n",
            "\n",
            "This is a copy of the test set of the UCI ML hand-written digits datasets\n",
            "https://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits\n",
            "\n",
            "The data set contains images of hand-written digits: 10 classes where\n",
            "each class refers to a digit.\n",
            "\n",
            "Preprocessing programs made available by NIST were used to extract\n",
            "normalized bitmaps of handwritten digits from a preprinted form. From a\n",
            "total of 43 people, 30 contributed to the training set and different 13\n",
            "to the test set. 32x32 bitmaps are divided into nonoverlapping blocks of\n",
            "4x4 and the number of on pixels are counted in each block. This generates\n",
            "an input matrix of 8x8 where each element is an integer in the range\n",
            "0..16. This reduces dimensionality and gives invariance to small\n",
            "distortions.\n",
            "\n",
            "For info on NIST preprocessing routines, see M. D. Garris, J. L. Blue, G.\n",
            "T. Candela, D. L. Dimmick, J. Geist, P. J. Grother, S. A. Janet, and C.\n",
            "L. Wilson, NIST Form-Based Handprint Recognition System, NISTIR 5469,\n",
            "1994.\n",
            "\n",
            ".. dropdown:: References\n",
            "\n",
            "  - C. Kaynak (1995) Methods of Combining Multiple Classifiers and Their\n",
            "    Applications to Handwritten Digit Recognition, MSc Thesis, Institute of\n",
            "    Graduate Studies in Science and Engineering, Bogazici University.\n",
            "  - E. Alpaydin, C. Kaynak (1998) Cascading Classifiers, Kybernetika.\n",
            "  - Ken Tang and Ponnuthurai N. Suganthan and Xi Yao and A. Kai Qin.\n",
            "    Linear dimensionalityreduction using relevance weighted LDA. School of\n",
            "    Electrical and Electronic Engineering Nanyang Technological University.\n",
            "    2005.\n",
            "  - Claudio Gentile. A New Approximate Maximal Margin Classification\n",
            "    Algorithm. NIPS. 2000.\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(digits)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RCwo0uIZ2CnR",
        "outputId": "27ade1a9-be90-48d2-f185-1b78442fe96b"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'data': array([[ 0.,  0.,  5., ...,  0.,  0.,  0.],\n",
            "       [ 0.,  0.,  0., ..., 10.,  0.,  0.],\n",
            "       [ 0.,  0.,  0., ..., 16.,  9.,  0.],\n",
            "       ...,\n",
            "       [ 0.,  0.,  1., ...,  6.,  0.,  0.],\n",
            "       [ 0.,  0.,  2., ..., 12.,  0.,  0.],\n",
            "       [ 0.,  0., 10., ..., 12.,  1.,  0.]]), 'target': array([0, 1, 2, ..., 8, 9, 8]), 'frame': None, 'feature_names': ['pixel_0_0', 'pixel_0_1', 'pixel_0_2', 'pixel_0_3', 'pixel_0_4', 'pixel_0_5', 'pixel_0_6', 'pixel_0_7', 'pixel_1_0', 'pixel_1_1', 'pixel_1_2', 'pixel_1_3', 'pixel_1_4', 'pixel_1_5', 'pixel_1_6', 'pixel_1_7', 'pixel_2_0', 'pixel_2_1', 'pixel_2_2', 'pixel_2_3', 'pixel_2_4', 'pixel_2_5', 'pixel_2_6', 'pixel_2_7', 'pixel_3_0', 'pixel_3_1', 'pixel_3_2', 'pixel_3_3', 'pixel_3_4', 'pixel_3_5', 'pixel_3_6', 'pixel_3_7', 'pixel_4_0', 'pixel_4_1', 'pixel_4_2', 'pixel_4_3', 'pixel_4_4', 'pixel_4_5', 'pixel_4_6', 'pixel_4_7', 'pixel_5_0', 'pixel_5_1', 'pixel_5_2', 'pixel_5_3', 'pixel_5_4', 'pixel_5_5', 'pixel_5_6', 'pixel_5_7', 'pixel_6_0', 'pixel_6_1', 'pixel_6_2', 'pixel_6_3', 'pixel_6_4', 'pixel_6_5', 'pixel_6_6', 'pixel_6_7', 'pixel_7_0', 'pixel_7_1', 'pixel_7_2', 'pixel_7_3', 'pixel_7_4', 'pixel_7_5', 'pixel_7_6', 'pixel_7_7'], 'target_names': array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 'images': array([[[ 0.,  0.,  5., ...,  1.,  0.,  0.],\n",
            "        [ 0.,  0., 13., ..., 15.,  5.,  0.],\n",
            "        [ 0.,  3., 15., ..., 11.,  8.,  0.],\n",
            "        ...,\n",
            "        [ 0.,  4., 11., ..., 12.,  7.,  0.],\n",
            "        [ 0.,  2., 14., ..., 12.,  0.,  0.],\n",
            "        [ 0.,  0.,  6., ...,  0.,  0.,  0.]],\n",
            "\n",
            "       [[ 0.,  0.,  0., ...,  5.,  0.,  0.],\n",
            "        [ 0.,  0.,  0., ...,  9.,  0.,  0.],\n",
            "        [ 0.,  0.,  3., ...,  6.,  0.,  0.],\n",
            "        ...,\n",
            "        [ 0.,  0.,  1., ...,  6.,  0.,  0.],\n",
            "        [ 0.,  0.,  1., ...,  6.,  0.,  0.],\n",
            "        [ 0.,  0.,  0., ..., 10.,  0.,  0.]],\n",
            "\n",
            "       [[ 0.,  0.,  0., ..., 12.,  0.,  0.],\n",
            "        [ 0.,  0.,  3., ..., 14.,  0.,  0.],\n",
            "        [ 0.,  0.,  8., ..., 16.,  0.,  0.],\n",
            "        ...,\n",
            "        [ 0.,  9., 16., ...,  0.,  0.,  0.],\n",
            "        [ 0.,  3., 13., ..., 11.,  5.,  0.],\n",
            "        [ 0.,  0.,  0., ..., 16.,  9.,  0.]],\n",
            "\n",
            "       ...,\n",
            "\n",
            "       [[ 0.,  0.,  1., ...,  1.,  0.,  0.],\n",
            "        [ 0.,  0., 13., ...,  2.,  1.,  0.],\n",
            "        [ 0.,  0., 16., ..., 16.,  5.,  0.],\n",
            "        ...,\n",
            "        [ 0.,  0., 16., ..., 15.,  0.,  0.],\n",
            "        [ 0.,  0., 15., ..., 16.,  0.,  0.],\n",
            "        [ 0.,  0.,  2., ...,  6.,  0.,  0.]],\n",
            "\n",
            "       [[ 0.,  0.,  2., ...,  0.,  0.,  0.],\n",
            "        [ 0.,  0., 14., ..., 15.,  1.,  0.],\n",
            "        [ 0.,  4., 16., ..., 16.,  7.,  0.],\n",
            "        ...,\n",
            "        [ 0.,  0.,  0., ..., 16.,  2.,  0.],\n",
            "        [ 0.,  0.,  4., ..., 16.,  2.,  0.],\n",
            "        [ 0.,  0.,  5., ..., 12.,  0.,  0.]],\n",
            "\n",
            "       [[ 0.,  0., 10., ...,  1.,  0.,  0.],\n",
            "        [ 0.,  2., 16., ...,  1.,  0.,  0.],\n",
            "        [ 0.,  0., 15., ..., 15.,  0.,  0.],\n",
            "        ...,\n",
            "        [ 0.,  4., 16., ..., 16.,  6.,  0.],\n",
            "        [ 0.,  8., 16., ..., 16.,  8.,  0.],\n",
            "        [ 0.,  1.,  8., ..., 12.,  1.,  0.]]]), 'DESCR': \".. _digits_dataset:\\n\\nOptical recognition of handwritten digits dataset\\n--------------------------------------------------\\n\\n**Data Set Characteristics:**\\n\\n:Number of Instances: 1797\\n:Number of Attributes: 64\\n:Attribute Information: 8x8 image of integer pixels in the range 0..16.\\n:Missing Attribute Values: None\\n:Creator: E. Alpaydin (alpaydin '@' boun.edu.tr)\\n:Date: July; 1998\\n\\nThis is a copy of the test set of the UCI ML hand-written digits datasets\\nhttps://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits\\n\\nThe data set contains images of hand-written digits: 10 classes where\\neach class refers to a digit.\\n\\nPreprocessing programs made available by NIST were used to extract\\nnormalized bitmaps of handwritten digits from a preprinted form. From a\\ntotal of 43 people, 30 contributed to the training set and different 13\\nto the test set. 32x32 bitmaps are divided into nonoverlapping blocks of\\n4x4 and the number of on pixels are counted in each block. This generates\\nan input matrix of 8x8 where each element is an integer in the range\\n0..16. This reduces dimensionality and gives invariance to small\\ndistortions.\\n\\nFor info on NIST preprocessing routines, see M. D. Garris, J. L. Blue, G.\\nT. Candela, D. L. Dimmick, J. Geist, P. J. Grother, S. A. Janet, and C.\\nL. Wilson, NIST Form-Based Handprint Recognition System, NISTIR 5469,\\n1994.\\n\\n.. dropdown:: References\\n\\n  - C. Kaynak (1995) Methods of Combining Multiple Classifiers and Their\\n    Applications to Handwritten Digit Recognition, MSc Thesis, Institute of\\n    Graduate Studies in Science and Engineering, Bogazici University.\\n  - E. Alpaydin, C. Kaynak (1998) Cascading Classifiers, Kybernetika.\\n  - Ken Tang and Ponnuthurai N. Suganthan and Xi Yao and A. Kai Qin.\\n    Linear dimensionalityreduction using relevance weighted LDA. School of\\n    Electrical and Electronic Engineering Nanyang Technological University.\\n    2005.\\n  - Claudio Gentile. A New Approximate Maximal Margin Classification\\n    Algorithm. NIPS. 2000.\\n\"}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = digits.data\n",
        "y = digits.target"
      ],
      "metadata": {
        "id": "ADE8c4Rv2PJd"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.DataFrame(data = y, columns = ['targets'])\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "5qk-UxvJ2Xa8",
        "outputId": "54f8d800-88d3-4001-a629-e1ceb2c10020"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      targets\n",
              "0           0\n",
              "1           1\n",
              "2           2\n",
              "3           3\n",
              "4           4\n",
              "...       ...\n",
              "1792        9\n",
              "1793        0\n",
              "1794        8\n",
              "1795        9\n",
              "1796        8\n",
              "\n",
              "[1797 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e9a7768c-8996-449a-833f-22306c989cc7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>targets</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1792</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1793</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1794</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1795</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1796</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1797 rows × 1 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e9a7768c-8996-449a-833f-22306c989cc7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e9a7768c-8996-449a-833f-22306c989cc7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e9a7768c-8996-449a-833f-22306c989cc7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9955d8db-a7a0-4a9d-97b4-1471e99e70c1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9955d8db-a7a0-4a9d-97b4-1471e99e70c1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9955d8db-a7a0-4a9d-97b4-1471e99e70c1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_36ec2c0e-8165-4da5-9e67-5e0296603196\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_36ec2c0e-8165-4da5-9e67-5e0296603196 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1797,\n  \"fields\": [\n    {\n      \"column\": \"targets\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          8,\n          1,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X.shape\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P4Q2xT4R2uKJ",
        "outputId": "15ebe2a6-05c5-4c70-bc60-a71364466522"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1797, 64)"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_C0FVslT2yq_",
        "outputId": "b868bc24-e179-4f7e-893f-6656c20ba54e"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1797,)"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "digits.images.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WsyVuLeW23Yu",
        "outputId": "d143cc9c-6c58-463b-d6b5-7006e15f90a9"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1797, 8, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "digits.images[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CmHx6wCV2_4A",
        "outputId": "b9875513-0f87-4874-ac76-fdd1721a0daf"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],\n",
              "       [ 0.,  0., 13., 15., 10., 15.,  5.,  0.],\n",
              "       [ 0.,  3., 15.,  2.,  0., 11.,  8.,  0.],\n",
              "       [ 0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],\n",
              "       [ 0.,  5.,  8.,  0.,  0.,  9.,  8.,  0.],\n",
              "       [ 0.,  4., 11.,  0.,  1., 12.,  7.,  0.],\n",
              "       [ 0.,  2., 14.,  5., 10., 12.,  0.,  0.],\n",
              "       [ 0.,  0.,  6., 13., 10.,  0.,  0.,  0.]])"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.imshow(digits.images[0], cmap = plt.cm.gray_r)\n",
        "plt.axis('off')\n",
        "plt.title('Number: '+ str(y[0]))\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "IVufBnNg3G2g",
        "outputId": "d01547de-871b-4771-e44d-911b4964a8ac"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAANRklEQVR4nO3dWYjVBf/H8e8p6bFNUzI0KUqtCNtIsRuxzYGkqIuySLSSbLkyqMAYbYHKhQoKIsiinS5Gw4uyoGgTIhKl5aLFdspsn0qtjOw8F/+/H/7zjE/L+Tv+Wl4vEJzzO+fM5ww6b37nHJ1Wu91uFwBU1S5NDwDgz0MUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhT4x3ruueeq1WrV8uXLm54CfxqiwIC67777qtVq1eDBg2v9+vX9jp9wwgl1xBFHNLDsz++NN96oU045pfbaa68aPnx4zZo1q7744oumZ/E3JwrsFFu2bKnFixc3PeMv4+OPP64pU6bUO++8UwsXLqwrr7yyVq5cWV1dXfXTTz81PY+/MVFgpzjmmGPqrrvuqk8++aTpKTvd5s2b//BtFi5cWJs3b65nnnmm5s6dW93d3dXT01Ovvvpq3XfffTt+JPwvUWCn6O7urq1bt/7m2cIHH3xQrVZru9/4Wq1WXXfddfn4uuuuq1arVevWrauZM2fW0KFDa8SIEXX11VdXu92ujz76qM4444waMmRIjRw5sm655Zbtfs6tW7dWd3d3jRw5svbcc886/fTT66OPPup3vZdeeqlOOeWUGjp0aO2xxx51/PHH1wsvvNDnOts2vf766zVjxowaNmxYTZ48uaqqvv3223rzzTfr22+//Y2vVtUjjzxSp512Wh144IG5bOrUqXXooYdWT0/Pb94eOiUK7BQHH3xwnXfeeQNytnDOOefUL7/8UosXL67jjjuubrjhhrr11lurq6urRo8eXUuWLKlx48bVlVdeWatWrep3+xtvvLFWrlxZ8+bNq7lz59ZTTz1VU6dOrR9++CHXeeaZZ2rKlCn13Xff1bXXXlsLFy6sb775pk466aRavXp1v/ucPn16ff/997Vw4cK66KKLqqpqxYoVdfjhh9eKFSt+9fGsX7++Pv/885o4cWK/Y5MmTaqXX375j36J4Hcb1PQA/jnmz59fDzzwQC1ZsqRuu+22HXa/kyZNqjvvvLOqqi6++OI66KCD6oorrqhFixbVvHnzqqrq3HPPrf3337/uueeemjJlSp/bf/311/XGG2/U3nvvXVVVxx57bJ199tl111131dy5c6vdbtell15aJ554Yj3xxBPVarWqquqSSy6p8ePH14IFC+rJJ5/sc59HH310Pfzwwx09ng0bNlRV1ahRo/odGzVqVH399de1ZcuW+te//tXR/cOvcabATjNmzJiaNWtWLV26NN/4doQ5c+bk97vuumtNnDix2u12XXjhhbl8n332qcMOO6zee++9frc/77zzEoSqqrPOOqtGjRpVjz/+eFVVvfLKK/X222/XjBkz6quvvqovv/yyvvzyy9q8eXOdfPLJtWrVqvrll1/63Oell17a7/NccMEF1W6364ILLvjVx7PtDGV73/QHDx7c5zqwo4kCO9WCBQvq559/3qHvRPq/z7tXVQ0dOrQGDx5c++67b7/Le3t7+93+kEMO6fNxq9WqcePG1QcffFBVVW+//XZVVZ1//vk1YsSIPr/uvvvu2rJlS7/XCQ4++OCOH8/uu+9eVf/zjq3/9OOPP/a5Duxonj5ipxozZkzNnDmzli5dWldddVW/49uemvlPW7du/a/3ueuuu/6uy6qqOvnps9vOAm666aY65phjtnudvfbaq8/H/59v2tueNtre2dSGDRtq+PDhnjpiwIgCO92CBQvqoYceqiVLlvQ7NmzYsKqq+uabb/pc/uGHHw7Ynm1nAtu02+1655136qijjqqqqrFjx1ZV1ZAhQ2rq1KkDtmOb0aNH14gRI2rNmjX9jq1evfq/hgl2BE8fsdONHTu2Zs6cWXfeeWd9+umnfY4NGTKk9t13337vErrjjjsGbM8DDzxQGzduzMfLly+vDRs21LRp06qqasKECTV27Ni6+eaba9OmTf1u/3v/lfEfeUvqmWeeWY899lift8Y+/fTTtW7dupo+ffrv+nzQCWcKNGL+/Pn14IMP1ltvvVXjx4/vc2zOnDm1ePHimjNnTk2cOLFWrVpV69atG7Atw4cPr8mTJ9fs2bPrs88+q1tvvbXGjRuXt5Lusssudffdd9e0adNq/PjxNXv27Bo9enStX7++nn322RoyZEg9+uijv/l5VqxYUbNnz6577733N19s7u7urmXLltWJJ55Yl112WW3atKluuummOvLII2v27Nk74mHDdokCjRg3blzN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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.imshow(digits.images[1], cmap = plt.cm.gray_r)\n",
        "plt.axis('off')\n",
        "plt.title('Number: '+ str(y[1]))\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "zk931klX3n2m",
        "outputId": "20b15a88-1295-4b57-8c4e-9a63a4e7b371"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAL80lEQVR4nO3dS4gVdP/H8e9Jg7IaNbQsofISEUYNKbkRtVTITbPpwiNqSpbWwk2B4aWMzAsVGITghTKNFiFIRAoFaUJEIiQtumiUImahlZNaCOn5r/rA/MfoeSb1VL5eIHjun+PmzW/OURvNZrNZAFBVF7V6AAB/H6IAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQosAFa/v27dVoNGrTpk2tngJ/G6LAObV+/fpqNBp1ySWX1MGDB7vdPn78+LrllltasOzvbefOnfXYY4/VyJEj6+KLL65Go9HqSVwgRIHz4uTJk7V8+fJWz/jH2LJlS61bt64ajUYNHTq01XO4gIgC50V7e3utXbu2vv3221ZPOe9OnDjxPz/m0Ucfrc7Oztq1a1dNmjTpHKyCMxMFzov58+fXqVOn/vS0sG/fvmo0GrV+/fputzUajVq8eHEuL168uBqNRu3Zs6emTp1affv2rYEDB9aiRYuq2WzWgQMHqqOjo9ra2mrQoEH14osvnvE1T506VfPnz69BgwbVZZddVvfcc08dOHCg2/0+/vjjuvvuu6tv377Vp0+fGjduXH344Ydd7vP7ps8++6ymTJlS/fv3rzFjxlRVVWdnZ33xxRfV2dn5J39aVVdffXVdeumlf3o/ONtEgfNiyJAhNX369HNyWnjggQfq9OnTtXz58ho9enQtWbKkVq5cWZMmTarBgwfXihUravjw4fXEE0/Ujh07uj3+ueeeq3feeafmzZtXc+fOrffee68mTpxYv/76a+7z/vvv19ixY+vnn3+up59+upYuXVpHjx6tu+66q3bu3NntOe+777765ZdfaunSpfXwww9XVdXmzZvr5ptvrs2bN5/V9w9nU+9WD+DCsWDBgtqwYUOtWLGiXnrppbP2vHfccUetXr26qqoeeeSRuuGGG+rxxx+vZcuW1bx586qq6j//+U9de+219corr9TYsWO7PP7HH3+szz//vK644oqqqrr99tvr/vvvr7Vr19bcuXOr2WzWnDlz6s4776ytW7fmQ9/Zs2fXiBEjauHChfXuu+92ec7bbrut3njjjbP2HuF8cVLgvBk6dGhNmzat1qxZU4cOHTprzztr1qz8vlevXjVq1KhqNpv10EMP5fp+/frVTTfdVF9//XW3x0+fPj1BqKq6995765prrqktW7ZUVdXu3btr7969NWXKlPrhhx/qyJEjdeTIkTpx4kRNmDChduzYUadPn+7ynHPmzOn2OjNmzKhms1kzZsz4q28ZzhlR4LxauHBh/fbbb2f1m0jXXXddl8t9+/atSy65pAYMGNDt+p9++qnb42+88cYulxuNRg0fPrz27dtXVVV79+6tqqoHH3ywBg4c2OXXunXr6uTJk90+JxgyZMhffVvQEn58xHk1dOjQmjp1aq1Zs6aefPLJbrf/0ffxT5069YfP2atXr//quqqqnvzvs7+fAp5//vlqb28/430uv/zyLpd9SMw/lShw3i1cuLBef/31WrFiRbfb+vfvX1VVR48e7XL9/v37z9me308Cv2s2m/XVV1/VrbfeWlVVw4YNq6qqtra2mjhx4jnbAX8HfnzEeTds2LCaOnVqrV69ur777rsut7W1tdWAAQO6fUto1apV52zPhg0b6tixY7m8adOmOnToUE2ePLmqqkaOHFnDhg2rF154oY4fP97t8YcPH/6vXud/+UoqtIqTAi2xYMGC2rhxY3355Zc1YsSILrfNmjWrli9fXrNmzapRo0bVjh07as+ePedsy5VXXlljxoypmTNn1vfff18rV66s4cOH56ukF110Ua1bt64mT55cI0aMqJkzZ9bgwYPr4MGDtW3btmpra6u33377T19n8+bNNXPmzHr11Vf/9MPm/fv318aNG6uqateuXVVVtWTJkqqquv7662vatGl/4R3DHxMFWmL48OE1derUeu2117rd9tRTT9Xhw4dr06ZN9eabb9bkyZNr69atddVVV52TLfPnz69PP/20li1bVseOHasJEybUqlWrqk+fPrnP+PHj66OPPqpnn322Xn755Tp+/HgNGjSoRo8eXbNnzz7rm7755ptatGhRl+t+vzxu3DhR4JxpNHvyyRsA/0o+UwAgRAGAEAUAQhQACFEAIEQBgPD3FDjrxo8f3+oJPfL//2mNf4pnnnmm1RN6pKOjo9UTOAMnBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAKJ3qwfw79OvX79WT+iRDz74oNUTemTbtm2tntAjHR0drZ7AGTgpABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEL1bPYAz2717d6sn9Nj27dtbPeGC0t7e3uoJ/Is4KQAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAED0bvWAc23lypWtntAjixcvbvWEHuvs7Gz1hAvK+PHjWz2BfxEnBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAKLRbDabrR5Bd0ePHm31hB7r379/qydcUD755JNWT+iR9vb2Vk/gDJwUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQAiN6tHgD8Nbt37271hB5pb29v9QTOwEkBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgerd6AGfWr1+/Vk/osY6OjlZP6JG33nqr1RN6ZPv27a2e0CMzZsxo9QTOwEkBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAaDSbzWarRwDw9+CkAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQPwf43n4rAkmtkYAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "figures, axes = plt.subplots(3, 10, figsize = (15, 6))\n",
        "\n",
        "for ax, image, number in zip(axes.ravel(), digits.images, y):\n",
        "    ax.axis('off')\n",
        "    ax.imshow(image, cmap = plt.cm.gray_r)\n",
        "    ax.set_title('Number: ' + str(number))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 483
        },
        "id": "DUJns_pE3u-J",
        "outputId": "6d53abe0-a2c1-4c23-e3a8-2c7c903ec696"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 30 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "image = digits.images[0]\n",
        "print('original image data =')\n",
        "print(image)\n",
        "print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o7bPli5w6qx4",
        "outputId": "8375d723-76e6-463b-ac28-33432338b0ca"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "original image data =\n",
            "[[ 0.  0.  5. 13.  9.  1.  0.  0.]\n",
            " [ 0.  0. 13. 15. 10. 15.  5.  0.]\n",
            " [ 0.  3. 15.  2.  0. 11.  8.  0.]\n",
            " [ 0.  4. 12.  0.  0.  8.  8.  0.]\n",
            " [ 0.  5.  8.  0.  0.  9.  8.  0.]\n",
            " [ 0.  4. 11.  0.  1. 12.  7.  0.]\n",
            " [ 0.  2. 14.  5. 10. 12.  0.  0.]\n",
            " [ 0.  0.  6. 13. 10.  0.  0.  0.]]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "image_flattened = image.ravel()\n",
        "print('flattened image')\n",
        "print(image_flattened)\n",
        "print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_rKM-5Fs8Ojx",
        "outputId": "4a57c5e0-71fa-4217-94e3-e1bf7921e66a"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "flattened image\n",
            "[ 0.  0.  5. 13.  9.  1.  0.  0.  0.  0. 13. 15. 10. 15.  5.  0.  0.  3.\n",
            " 15.  2.  0. 11.  8.  0.  0.  4. 12.  0.  0.  8.  8.  0.  0.  5.  8.  0.\n",
            "  0.  9.  8.  0.  0.  4. 11.  0.  1. 12.  7.  0.  0.  2. 14.  5. 10. 12.\n",
            "  0.  0.  0.  0.  6. 13. 10.  0.  0.  0.]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('feature data for a sample = ')\n",
        "print(X[0])\n",
        "print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "orLluE3t8QcB",
        "outputId": "9f514668-9543-4bf0-d033-79f859a20729"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature data for a sample = \n",
            "[ 0.  0.  5. 13.  9.  1.  0.  0.  0.  0. 13. 15. 10. 15.  5.  0.  0.  3.\n",
            " 15.  2.  0. 11.  8.  0.  0.  4. 12.  0.  0.  8.  8.  0.  0.  5.  8.  0.\n",
            "  0.  9.  8.  0.  0.  4. 11.  0.  1. 12.  7.  0.  0.  2. 14.  5. 10. 12.\n",
            "  0.  0.  0.  0.  6. 13. 10.  0.  0.  0.]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Feature data for all samples is a 8-by-8 two dimensional array: ')\n",
        "print(X)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2z6A986z8iHB",
        "outputId": "9662583a-8be4-4857-ca1f-336e645d5bb1"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature data for all samples is a 8-by-8 two dimensional array: \n",
            "[[ 0.  0.  5. ...  0.  0.  0.]\n",
            " [ 0.  0.  0. ... 10.  0.  0.]\n",
            " [ 0.  0.  0. ... 16.  9.  0.]\n",
            " ...\n",
            " [ 0.  0.  1. ...  6.  0.  0.]\n",
            " [ 0.  0.  2. ... 12.  0.  0.]\n",
            " [ 0.  0. 10. ... 12.  1.  0.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33,  random_state = 99, stratify = y)"
      ],
      "metadata": {
        "id": "gM6tri8V8x7N"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bE7h8Fw9-hiA",
        "outputId": "82b2b5e1-6aad-4404-ee53-28c762002fc6"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1203, 64)"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ByEBd_tf-kcx",
        "outputId": "e18169b1-8b68-45d4-882c-c07e9693c588"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1203,)"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tXZX-GCz-qp-",
        "outputId": "556c6481-2067-4b6f-c049-a781369cda3e"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(594, 64)"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I-3hUgDK-uJv",
        "outputId": "0f4ca2bc-5bf2-41c6-84b2-af63fb68c416"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(594,)"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The parameter stratify=y in functions like train_test_split from sklearn.model_selection ensures that the training and testing datasets will have the same proportion of classes as in the original dataset. This is important for maintaining the distribution of target classes, especially in cases of imbalanced classes."
      ],
      "metadata": {
        "id": "xWB0RoS9-GKw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "knn = KNeighborsClassifier(n_neighbors = 3)\n",
        "knn.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "9e9GQhuM-7K7",
        "outputId": "6f225a1b-98b9-49d1-bade-04bc5b24ab16"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(n_neighbors=3)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-3 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-3 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-3 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-3 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-3 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KNeighborsClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier(n_neighbors=3)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = knn.predict(X_test)\n",
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cLFKGtzfmFet",
        "outputId": "b720fca5-a5a3-41e6-fd7a-ba457a121281"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 9, 4, 7, 0, 6, 5, 8, 3, 5, 1, 1, 6, 6, 1, 9, 1, 3, 8, 0, 0, 1,\n",
              "       4, 3, 7, 5, 1, 5, 2, 3, 5, 0, 5, 2, 2, 3, 0, 6, 9, 3, 4, 9, 7, 4,\n",
              "       5, 8, 7, 2, 5, 1, 6, 7, 7, 8, 4, 5, 1, 0, 3, 7, 6, 7, 0, 7, 3, 6,\n",
              "       7, 2, 6, 1, 5, 0, 3, 9, 3, 1, 0, 4, 3, 0, 2, 7, 3, 7, 7, 9, 1, 4,\n",
              "       7, 4, 1, 5, 1, 0, 4, 0, 8, 7, 6, 7, 9, 9, 4, 4, 8, 9, 0, 8, 3, 8,\n",
              "       5, 5, 2, 2, 4, 0, 8, 3, 2, 2, 9, 5, 3, 6, 9, 2, 9, 0, 0, 0, 0, 5,\n",
              "       4, 2, 8, 6, 9, 4, 4, 6, 7, 3, 8, 0, 6, 7, 2, 1, 8, 0, 7, 3, 1, 7,\n",
              "       4, 3, 4, 2, 1, 5, 3, 3, 6, 9, 2, 2, 0, 6, 7, 8, 1, 7, 3, 8, 2, 5,\n",
              "       4, 9, 2, 0, 5, 0, 9, 1, 1, 2, 8, 7, 7, 6, 5, 5, 7, 6, 0, 5, 7, 1,\n",
              "       4, 5, 9, 0, 5, 1, 9, 9, 5, 6, 6, 7, 4, 9, 5, 4, 8, 8, 1, 3, 3, 1,\n",
              "       2, 2, 9, 1, 9, 6, 4, 3, 8, 5, 0, 9, 2, 8, 4, 6, 0, 2, 7, 2, 3, 6,\n",
              "       1, 8, 9, 5, 6, 0, 8, 5, 8, 6, 5, 0, 3, 1, 7, 0, 7, 2, 8, 5, 1, 5,\n",
              "       6, 9, 3, 0, 0, 3, 9, 4, 5, 0, 6, 1, 3, 3, 7, 4, 1, 4, 0, 7, 1, 7,\n",
              "       2, 6, 5, 9, 0, 0, 9, 6, 6, 0, 5, 4, 0, 1, 4, 5, 7, 9, 4, 6, 9, 0,\n",
              "       3, 0, 9, 9, 4, 8, 4, 0, 3, 7, 1, 7, 5, 5, 9, 3, 7, 2, 4, 8, 4, 3,\n",
              "       1, 1, 2, 0, 6, 8, 9, 5, 6, 9, 3, 5, 4, 3, 1, 7, 4, 1, 1, 3, 0, 9,\n",
              "       4, 8, 6, 3, 6, 9, 4, 6, 6, 4, 1, 7, 9, 8, 4, 3, 9, 6, 8, 6, 0, 5,\n",
              "       7, 5, 2, 8, 2, 2, 6, 5, 0, 5, 0, 4, 9, 6, 2, 6, 8, 7, 5, 5, 9, 4,\n",
              "       9, 3, 6, 2, 9, 8, 2, 2, 5, 7, 6, 9, 1, 2, 4, 5, 1, 0, 0, 7, 8, 5,\n",
              "       1, 2, 3, 8, 7, 2, 3, 7, 1, 0, 6, 2, 2, 7, 2, 2, 2, 0, 9, 7, 5, 2,\n",
              "       2, 1, 4, 6, 6, 8, 2, 1, 4, 8, 2, 4, 8, 3, 5, 5, 1, 9, 6, 3, 4, 4,\n",
              "       3, 6, 5, 9, 3, 1, 4, 8, 4, 9, 2, 5, 7, 9, 2, 4, 5, 9, 2, 6, 8, 7,\n",
              "       3, 8, 5, 1, 8, 8, 6, 3, 6, 8, 3, 7, 1, 4, 8, 4, 5, 6, 7, 4, 3, 6,\n",
              "       1, 3, 7, 0, 1, 5, 6, 6, 5, 1, 1, 1, 8, 4, 2, 2, 3, 8, 8, 7, 9, 8,\n",
              "       3, 9, 9, 4, 7, 0, 1, 4, 1, 8, 9, 6, 5, 2, 2, 4, 0, 1, 6, 0, 6, 5,\n",
              "       8, 4, 1, 7, 5, 6, 0, 9, 4, 9, 1, 7, 8, 3, 7, 9, 7, 7, 9, 8, 1, 0,\n",
              "       7, 7, 8, 9, 6, 0, 3, 8, 1, 0, 3, 4, 3, 8, 1, 3, 3, 1, 2, 2, 2, 2])"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "report = classification_report(y_test, y_pred)\n",
        "print(report)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jkBpkKPnmT_H",
        "outputId": "9b1f1adc-4e2e-4890-d372-ef6afac080be"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        59\n",
            "           1       0.95      0.98      0.97        60\n",
            "           2       1.00      0.98      0.99        59\n",
            "           3       1.00      0.98      0.99        60\n",
            "           4       1.00      1.00      1.00        60\n",
            "           5       0.97      0.98      0.98        60\n",
            "           6       1.00      1.00      1.00        60\n",
            "           7       0.97      1.00      0.98        59\n",
            "           8       1.00      0.95      0.97        58\n",
            "           9       0.98      0.98      0.98        59\n",
            "\n",
            "    accuracy                           0.99       594\n",
            "   macro avg       0.99      0.99      0.99       594\n",
            "weighted avg       0.99      0.99      0.99       594\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "confusion = confusion_matrix(y_true = y_test, y_pred = y_pred)\n",
        "confusion"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "psBuYno3n5Si",
        "outputId": "37e1be1c-6f21-4f48-b04e-8431ba7c03b5"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[59,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n",
              "       [ 0, 59,  0,  0,  0,  1,  0,  0,  0,  0],\n",
              "       [ 0,  0, 58,  0,  0,  0,  0,  1,  0,  0],\n",
              "       [ 0,  0,  0, 59,  0,  0,  0,  1,  0,  0],\n",
              "       [ 0,  0,  0,  0, 60,  0,  0,  0,  0,  0],\n",
              "       [ 0,  0,  0,  0,  0, 59,  0,  0,  0,  1],\n",
              "       [ 0,  0,  0,  0,  0,  0, 60,  0,  0,  0],\n",
              "       [ 0,  0,  0,  0,  0,  0,  0, 59,  0,  0],\n",
              "       [ 0,  3,  0,  0,  0,  0,  0,  0, 55,  0],\n",
              "       [ 0,  0,  0,  0,  0,  1,  0,  0,  0, 58]])"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "s = sns.heatmap(confusion, annot = True, cmap = 'nipy_spectral_r', fmt = 'g')\n",
        "s.set_title('Confusion Matrix for MNIST dataset')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 470
        },
        "id": "mrd62tDqoRIh",
        "outputId": "67d42447-1365-487f-90df-727e69761422"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Confusion Matrix for MNIST dataset')"
            ]
          },
          "metadata": {},
          "execution_count": 50
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "acc = knn.score(X_test, y_test)\n",
        "print(f'accuracy from knn.score = {acc:.4}')\n",
        "\n",
        "from sklearn import metrics\n",
        "acc = metrics.accuracy_score(y_test, y_pred)\n",
        "print(f'accuracy from metrics.accuracy_score = {acc:.4}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1BrdpssJpcbf",
        "outputId": "dddf449a-112c-442d-ada0-cab6fcb099c2"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "accuracy from knn.score = 0.9865\n",
            "accuracy from metrics.accuracy_score = 0.9865\n"
          ]
        }
      ]
    }
  ]
}