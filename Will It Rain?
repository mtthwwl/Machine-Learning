{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyOg+g2qzAUyUkmEMNGIhS+r"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 74,
      "metadata": {
        "id": "SHIf3CoGX5td"
      },
      "outputs": [],
      "source": [
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "import matplotlib.pyplot as plt # data visualization\n",
        "import seaborn as sns # statistical data visualization\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import warnings # it ignores the warnings which may come up they are not important.\n",
        "\n",
        "warnings.filterwarnings('ignore')"
      ],
      "metadata": {
        "id": "tPDSdWDiZgZL"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lzLvDNOOZuO2",
        "outputId": "6d2180ea-10d6-4d97-e80f-8702fe0dd4f9"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = ('/content/drive/MyDrive/Dataset/weather.csv')\n",
        "\n",
        "df = pd.read_csv(data)"
      ],
      "metadata": {
        "id": "lEitWbeTZ_gt"
      },
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LrejGwzyaTS0",
        "outputId": "f5a6e797-8eb0-45be-867e-1b5c7527db6e"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(145460, 23)"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2utSUQGbaWGN",
        "outputId": "ea0dccfa-0598-451a-b264-692a8b32408d"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 145460 entries, 0 to 145459\n",
            "Data columns (total 23 columns):\n",
            " #   Column         Non-Null Count   Dtype  \n",
            "---  ------         --------------   -----  \n",
            " 0   Date           145460 non-null  object \n",
            " 1   Location       145460 non-null  object \n",
            " 2   MinTemp        143975 non-null  float64\n",
            " 3   MaxTemp        144199 non-null  float64\n",
            " 4   Rainfall       142199 non-null  float64\n",
            " 5   Evaporation    82670 non-null   float64\n",
            " 6   Sunshine       75625 non-null   float64\n",
            " 7   WindGustDir    135134 non-null  object \n",
            " 8   WindGustSpeed  135197 non-null  float64\n",
            " 9   WindDir9am     134894 non-null  object \n",
            " 10  WindDir3pm     141232 non-null  object \n",
            " 11  WindSpeed9am   143693 non-null  float64\n",
            " 12  WindSpeed3pm   142398 non-null  float64\n",
            " 13  Humidity9am    142806 non-null  float64\n",
            " 14  Humidity3pm    140953 non-null  float64\n",
            " 15  Pressure9am    130395 non-null  float64\n",
            " 16  Pressure3pm    130432 non-null  float64\n",
            " 17  Cloud9am       89572 non-null   float64\n",
            " 18  Cloud3pm       86102 non-null   float64\n",
            " 19  Temp9am        143693 non-null  float64\n",
            " 20  Temp3pm        141851 non-null  float64\n",
            " 21  RainToday      142199 non-null  object \n",
            " 22  RainTomorrow   142193 non-null  object \n",
            "dtypes: float64(16), object(7)\n",
            "memory usage: 25.5+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "AHplavnpaZqh",
        "outputId": "de13133c-4ae7-4246-cd15-6d44d70c67b0"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date Location  MinTemp  MaxTemp  Rainfall  Evaporation  Sunshine  \\\n",
              "0  2008-12-01   Albury     13.4     22.9       0.6          NaN       NaN   \n",
              "1  2008-12-02   Albury      7.4     25.1       0.0          NaN       NaN   \n",
              "2  2008-12-03   Albury     12.9     25.7       0.0          NaN       NaN   \n",
              "3  2008-12-04   Albury      9.2     28.0       0.0          NaN       NaN   \n",
              "4  2008-12-05   Albury     17.5     32.3       1.0          NaN       NaN   \n",
              "\n",
              "  WindGustDir  WindGustSpeed WindDir9am  ... Humidity9am  Humidity3pm  \\\n",
              "0           W           44.0          W  ...        71.0         22.0   \n",
              "1         WNW           44.0        NNW  ...        44.0         25.0   \n",
              "2         WSW           46.0          W  ...        38.0         30.0   \n",
              "3          NE           24.0         SE  ...        45.0         16.0   \n",
              "4           W           41.0        ENE  ...        82.0         33.0   \n",
              "\n",
              "   Pressure9am  Pressure3pm  Cloud9am  Cloud3pm  Temp9am  Temp3pm  RainToday  \\\n",
              "0       1007.7       1007.1       8.0       NaN     16.9     21.8         No   \n",
              "1       1010.6       1007.8       NaN       NaN     17.2     24.3         No   \n",
              "2       1007.6       1008.7       NaN       2.0     21.0     23.2         No   \n",
              "3       1017.6       1012.8       NaN       NaN     18.1     26.5         No   \n",
              "4       1010.8       1006.0       7.0       8.0     17.8     29.7         No   \n",
              "\n",
              "   RainTomorrow  \n",
              "0            No  \n",
              "1            No  \n",
              "2            No  \n",
              "3            No  \n",
              "4            No  \n",
              "\n",
              "[5 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-193564cd-57b1-477a-91fb-f9dbe45a6b86\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Location</th>\n",
              "      <th>MinTemp</th>\n",
              "      <th>MaxTemp</th>\n",
              "      <th>Rainfall</th>\n",
              "      <th>Evaporation</th>\n",
              "      <th>Sunshine</th>\n",
              "      <th>WindGustDir</th>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <th>WindDir9am</th>\n",
              "      <th>...</th>\n",
              "      <th>Humidity9am</th>\n",
              "      <th>Humidity3pm</th>\n",
              "      <th>Pressure9am</th>\n",
              "      <th>Pressure3pm</th>\n",
              "      <th>Cloud9am</th>\n",
              "      <th>Cloud3pm</th>\n",
              "      <th>Temp9am</th>\n",
              "      <th>Temp3pm</th>\n",
              "      <th>RainToday</th>\n",
              "      <th>RainTomorrow</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2008-12-01</td>\n",
              "      <td>Albury</td>\n",
              "      <td>13.4</td>\n",
              "      <td>22.9</td>\n",
              "      <td>0.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>W</td>\n",
              "      <td>44.0</td>\n",
              "      <td>W</td>\n",
              "      <td>...</td>\n",
              "      <td>71.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1007.7</td>\n",
              "      <td>1007.1</td>\n",
              "      <td>8.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>16.9</td>\n",
              "      <td>21.8</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2008-12-02</td>\n",
              "      <td>Albury</td>\n",
              "      <td>7.4</td>\n",
              "      <td>25.1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>WNW</td>\n",
              "      <td>44.0</td>\n",
              "      <td>NNW</td>\n",
              "      <td>...</td>\n",
              "      <td>44.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>1010.6</td>\n",
              "      <td>1007.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>17.2</td>\n",
              "      <td>24.3</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2008-12-03</td>\n",
              "      <td>Albury</td>\n",
              "      <td>12.9</td>\n",
              "      <td>25.7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>WSW</td>\n",
              "      <td>46.0</td>\n",
              "      <td>W</td>\n",
              "      <td>...</td>\n",
              "      <td>38.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>1007.6</td>\n",
              "      <td>1008.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>23.2</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2008-12-04</td>\n",
              "      <td>Albury</td>\n",
              "      <td>9.2</td>\n",
              "      <td>28.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NE</td>\n",
              "      <td>24.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>...</td>\n",
              "      <td>45.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>1017.6</td>\n",
              "      <td>1012.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>18.1</td>\n",
              "      <td>26.5</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2008-12-05</td>\n",
              "      <td>Albury</td>\n",
              "      <td>17.5</td>\n",
              "      <td>32.3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>W</td>\n",
              "      <td>41.0</td>\n",
              "      <td>ENE</td>\n",
              "      <td>...</td>\n",
              "      <td>82.0</td>\n",
              "      <td>33.0</td>\n",
              "      <td>1010.8</td>\n",
              "      <td>1006.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>17.8</td>\n",
              "      <td>29.7</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-193564cd-57b1-477a-91fb-f9dbe45a6b86')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-193564cd-57b1-477a-91fb-f9dbe45a6b86 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-193564cd-57b1-477a-91fb-f9dbe45a6b86');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7b592936-6388-4695-9adc-3697714f92ae\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7b592936-6388-4695-9adc-3697714f92ae')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7b592936-6388-4695-9adc-3697714f92ae button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "-u7BeYXYanOG",
        "outputId": "821fcf11-85e3-41ae-e76a-d47204a28868"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Date Location  MinTemp  MaxTemp  Rainfall  Evaporation  \\\n",
              "145455  2017-06-21    Uluru      2.8     23.4       0.0          NaN   \n",
              "145456  2017-06-22    Uluru      3.6     25.3       0.0          NaN   \n",
              "145457  2017-06-23    Uluru      5.4     26.9       0.0          NaN   \n",
              "145458  2017-06-24    Uluru      7.8     27.0       0.0          NaN   \n",
              "145459  2017-06-25    Uluru     14.9      NaN       0.0          NaN   \n",
              "\n",
              "        Sunshine WindGustDir  WindGustSpeed WindDir9am  ... Humidity9am  \\\n",
              "145455       NaN           E           31.0         SE  ...        51.0   \n",
              "145456       NaN         NNW           22.0         SE  ...        56.0   \n",
              "145457       NaN           N           37.0         SE  ...        53.0   \n",
              "145458       NaN          SE           28.0        SSE  ...        51.0   \n",
              "145459       NaN         NaN            NaN        ESE  ...        62.0   \n",
              "\n",
              "        Humidity3pm  Pressure9am  Pressure3pm  Cloud9am  Cloud3pm  Temp9am  \\\n",
              "145455         24.0       1024.6       1020.3       NaN       NaN     10.1   \n",
              "145456         21.0       1023.5       1019.1       NaN       NaN     10.9   \n",
              "145457         24.0       1021.0       1016.8       NaN       NaN     12.5   \n",
              "145458         24.0       1019.4       1016.5       3.0       2.0     15.1   \n",
              "145459         36.0       1020.2       1017.9       8.0       8.0     15.0   \n",
              "\n",
              "        Temp3pm  RainToday  RainTomorrow  \n",
              "145455     22.4         No            No  \n",
              "145456     24.5         No            No  \n",
              "145457     26.1         No            No  \n",
              "145458     26.0         No            No  \n",
              "145459     20.9         No           NaN  \n",
              "\n",
              "[5 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bc282eed-34eb-436b-be12-95d5a38cedee\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Location</th>\n",
              "      <th>MinTemp</th>\n",
              "      <th>MaxTemp</th>\n",
              "      <th>Rainfall</th>\n",
              "      <th>Evaporation</th>\n",
              "      <th>Sunshine</th>\n",
              "      <th>WindGustDir</th>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <th>WindDir9am</th>\n",
              "      <th>...</th>\n",
              "      <th>Humidity9am</th>\n",
              "      <th>Humidity3pm</th>\n",
              "      <th>Pressure9am</th>\n",
              "      <th>Pressure3pm</th>\n",
              "      <th>Cloud9am</th>\n",
              "      <th>Cloud3pm</th>\n",
              "      <th>Temp9am</th>\n",
              "      <th>Temp3pm</th>\n",
              "      <th>RainToday</th>\n",
              "      <th>RainTomorrow</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>145455</th>\n",
              "      <td>2017-06-21</td>\n",
              "      <td>Uluru</td>\n",
              "      <td>2.8</td>\n",
              "      <td>23.4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>E</td>\n",
              "      <td>31.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>...</td>\n",
              "      <td>51.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1024.6</td>\n",
              "      <td>1020.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10.1</td>\n",
              "      <td>22.4</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145456</th>\n",
              "      <td>2017-06-22</td>\n",
              "      <td>Uluru</td>\n",
              "      <td>3.6</td>\n",
              "      <td>25.3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NNW</td>\n",
              "      <td>22.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>...</td>\n",
              "      <td>56.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>1023.5</td>\n",
              "      <td>1019.1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10.9</td>\n",
              "      <td>24.5</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145457</th>\n",
              "      <td>2017-06-23</td>\n",
              "      <td>Uluru</td>\n",
              "      <td>5.4</td>\n",
              "      <td>26.9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>N</td>\n",
              "      <td>37.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>...</td>\n",
              "      <td>53.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1021.0</td>\n",
              "      <td>1016.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.5</td>\n",
              "      <td>26.1</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145458</th>\n",
              "      <td>2017-06-24</td>\n",
              "      <td>Uluru</td>\n",
              "      <td>7.8</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>SE</td>\n",
              "      <td>28.0</td>\n",
              "      <td>SSE</td>\n",
              "      <td>...</td>\n",
              "      <td>51.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>1019.4</td>\n",
              "      <td>1016.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>15.1</td>\n",
              "      <td>26.0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145459</th>\n",
              "      <td>2017-06-25</td>\n",
              "      <td>Uluru</td>\n",
              "      <td>14.9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>ESE</td>\n",
              "      <td>...</td>\n",
              "      <td>62.0</td>\n",
              "      <td>36.0</td>\n",
              "      <td>1020.2</td>\n",
              "      <td>1017.9</td>\n",
              "      <td>8.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>20.9</td>\n",
              "      <td>No</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bc282eed-34eb-436b-be12-95d5a38cedee')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bc282eed-34eb-436b-be12-95d5a38cedee button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bc282eed-34eb-436b-be12-95d5a38cedee');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2f2cb44b-56f9-4fa1-8f55-528c6b0108f5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2f2cb44b-56f9-4fa1-8f55-528c6b0108f5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2f2cb44b-56f9-4fa1-8f55-528c6b0108f5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "col_names = df.columns\n",
        "\n",
        "col_names"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XV7s_YRdawQ9",
        "outputId": "9d57d161-98a9-43cc-d740-95426e3734f2"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Date', 'Location', 'MinTemp', 'MaxTemp', 'Rainfall', 'Evaporation',\n",
              "       'Sunshine', 'WindGustDir', 'WindGustSpeed', 'WindDir9am', 'WindDir3pm',\n",
              "       'WindSpeed9am', 'WindSpeed3pm', 'Humidity9am', 'Humidity3pm',\n",
              "       'Pressure9am', 'Pressure3pm', 'Cloud9am', 'Cloud3pm', 'Temp9am',\n",
              "       'Temp3pm', 'RainToday', 'RainTomorrow'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# find categorical variables\n",
        "\n",
        "categorical = [var for var in df.columns if df[var].dtype=='O']\n",
        "\n",
        "print('There are {} categorical variables\\n'.format(len(categorical)))\n",
        "\n",
        "print('The categorical variables are :', categorical)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "owSDu2rkbJm4",
        "outputId": "2c238d48-4831-489f-cdd2-67414f1b42b3"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 7 categorical variables\n",
            "\n",
            "The categorical variables are : ['Date', 'Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm', 'RainToday', 'RainTomorrow']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[categorical].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "sha7aMFRcbw_",
        "outputId": "3ac935df-b396-4d79-f028-6c4e54de814c"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date Location WindGustDir WindDir9am WindDir3pm RainToday  \\\n",
              "0  2008-12-01   Albury           W          W        WNW        No   \n",
              "1  2008-12-02   Albury         WNW        NNW        WSW        No   \n",
              "2  2008-12-03   Albury         WSW          W        WSW        No   \n",
              "3  2008-12-04   Albury          NE         SE          E        No   \n",
              "4  2008-12-05   Albury           W        ENE         NW        No   \n",
              "\n",
              "  RainTomorrow  \n",
              "0           No  \n",
              "1           No  \n",
              "2           No  \n",
              "3           No  \n",
              "4           No  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-860ab460-8bd8-47f6-92dc-1159221ce292\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Location</th>\n",
              "      <th>WindGustDir</th>\n",
              "      <th>WindDir9am</th>\n",
              "      <th>WindDir3pm</th>\n",
              "      <th>RainToday</th>\n",
              "      <th>RainTomorrow</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2008-12-01</td>\n",
              "      <td>Albury</td>\n",
              "      <td>W</td>\n",
              "      <td>W</td>\n",
              "      <td>WNW</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2008-12-02</td>\n",
              "      <td>Albury</td>\n",
              "      <td>WNW</td>\n",
              "      <td>NNW</td>\n",
              "      <td>WSW</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2008-12-03</td>\n",
              "      <td>Albury</td>\n",
              "      <td>WSW</td>\n",
              "      <td>W</td>\n",
              "      <td>WSW</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2008-12-04</td>\n",
              "      <td>Albury</td>\n",
              "      <td>NE</td>\n",
              "      <td>SE</td>\n",
              "      <td>E</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2008-12-05</td>\n",
              "      <td>Albury</td>\n",
              "      <td>W</td>\n",
              "      <td>ENE</td>\n",
              "      <td>NW</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-860ab460-8bd8-47f6-92dc-1159221ce292')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-860ab460-8bd8-47f6-92dc-1159221ce292 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-860ab460-8bd8-47f6-92dc-1159221ce292');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c42e3abc-c351-40e2-9470-9a6c646326af\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c42e3abc-c351-40e2-9470-9a6c646326af')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c42e3abc-c351-40e2-9470-9a6c646326af button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[categorical]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2008-12-02\",\n          \"2008-12-05\",\n          \"2008-12-03\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Albury\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WindGustDir\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"WNW\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WindDir9am\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"NNW\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WindDir3pm\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"WSW\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RainToday\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RainTomorrow\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[categorical].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "HNjKIMzYcvYk",
        "outputId": "9d78ac67-5ae6-447c-be57-0aa63c1b8c87"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date                0\n",
              "Location            0\n",
              "WindGustDir     10326\n",
              "WindDir9am      10566\n",
              "WindDir3pm       4228\n",
              "RainToday        3261\n",
              "RainTomorrow     3267\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Location</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindGustDir</th>\n",
              "      <td>10326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindDir9am</th>\n",
              "      <td>10566</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindDir3pm</th>\n",
              "      <td>4228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RainToday</th>\n",
              "      <td>3261</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RainTomorrow</th>\n",
              "      <td>3267</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# print categorical variables containing missing values\n",
        "\n",
        "cat1 = [var for var in categorical if df[var].isnull().sum()!=0]\n",
        "print(df[cat1].isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0WODeHSQc64_",
        "outputId": "8e428d23-2d82-4eaf-c99c-8108529a57d4"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "WindGustDir     10326\n",
            "WindDir9am      10566\n",
            "WindDir3pm       4228\n",
            "RainToday        3261\n",
            "RainTomorrow     3267\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for var in categorical:\n",
        "\n",
        "    print(df[var].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aBS3MD7dem7Y",
        "outputId": "8238c5af-7ca6-416f-c9c8-ed2bfaae09c7"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date\n",
            "2013-11-12    49\n",
            "2014-09-01    49\n",
            "2014-08-23    49\n",
            "2014-08-24    49\n",
            "2014-08-25    49\n",
            "              ..\n",
            "2007-11-29     1\n",
            "2007-11-28     1\n",
            "2007-11-27     1\n",
            "2007-11-26     1\n",
            "2008-01-31     1\n",
            "Name: count, Length: 3436, dtype: int64\n",
            "Location\n",
            "Canberra            3436\n",
            "Sydney              3344\n",
            "Darwin              3193\n",
            "Melbourne           3193\n",
            "Brisbane            3193\n",
            "Adelaide            3193\n",
            "Perth               3193\n",
            "Hobart              3193\n",
            "Albany              3040\n",
            "MountGambier        3040\n",
            "Ballarat            3040\n",
            "Townsville          3040\n",
            "GoldCoast           3040\n",
            "Cairns              3040\n",
            "Launceston          3040\n",
            "AliceSprings        3040\n",
            "Bendigo             3040\n",
            "Albury              3040\n",
            "MountGinini         3040\n",
            "Wollongong          3040\n",
            "Newcastle           3039\n",
            "Tuggeranong         3039\n",
            "Penrith             3039\n",
            "Woomera             3009\n",
            "Nuriootpa           3009\n",
            "Cobar               3009\n",
            "CoffsHarbour        3009\n",
            "Moree               3009\n",
            "Sale                3009\n",
            "PerthAirport        3009\n",
            "PearceRAAF          3009\n",
            "Witchcliffe         3009\n",
            "BadgerysCreek       3009\n",
            "Mildura             3009\n",
            "NorfolkIsland       3009\n",
            "MelbourneAirport    3009\n",
            "Richmond            3009\n",
            "SydneyAirport       3009\n",
            "WaggaWagga          3009\n",
            "Williamtown         3009\n",
            "Dartmoor            3009\n",
            "Watsonia            3009\n",
            "Portland            3009\n",
            "Walpole             3006\n",
            "NorahHead           3004\n",
            "SalmonGums          3001\n",
            "Katherine           1578\n",
            "Nhil                1578\n",
            "Uluru               1578\n",
            "Name: count, dtype: int64\n",
            "WindGustDir\n",
            "W      9915\n",
            "SE     9418\n",
            "N      9313\n",
            "SSE    9216\n",
            "E      9181\n",
            "S      9168\n",
            "WSW    9069\n",
            "SW     8967\n",
            "SSW    8736\n",
            "WNW    8252\n",
            "NW     8122\n",
            "ENE    8104\n",
            "ESE    7372\n",
            "NE     7133\n",
            "NNW    6620\n",
            "NNE    6548\n",
            "Name: count, dtype: int64\n",
            "WindDir9am\n",
            "N      11758\n",
            "SE      9287\n",
            "E       9176\n",
            "SSE     9112\n",
            "NW      8749\n",
            "S       8659\n",
            "W       8459\n",
            "SW      8423\n",
            "NNE     8129\n",
            "NNW     7980\n",
            "ENE     7836\n",
            "NE      7671\n",
            "ESE     7630\n",
            "SSW     7587\n",
            "WNW     7414\n",
            "WSW     7024\n",
            "Name: count, dtype: int64\n",
            "WindDir3pm\n",
            "SE     10838\n",
            "W      10110\n",
            "S       9926\n",
            "WSW     9518\n",
            "SSE     9399\n",
            "SW      9354\n",
            "N       8890\n",
            "WNW     8874\n",
            "NW      8610\n",
            "ESE     8505\n",
            "E       8472\n",
            "NE      8263\n",
            "SSW     8156\n",
            "NNW     7870\n",
            "ENE     7857\n",
            "NNE     6590\n",
            "Name: count, dtype: int64\n",
            "RainToday\n",
            "No     110319\n",
            "Yes     31880\n",
            "Name: count, dtype: int64\n",
            "RainTomorrow\n",
            "No     110316\n",
            "Yes     31877\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for var in categorical:\n",
        "\n",
        "    print(var, ' contains ', len(df[var].unique()), ' labels')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ySKRWgM6fDVE",
        "outputId": "87791b3a-0782-4515-a5b3-31787b6fa085"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Date  contains  3436  labels\n",
            "Location  contains  49  labels\n",
            "WindGustDir  contains  17  labels\n",
            "WindDir9am  contains  17  labels\n",
            "WindDir3pm  contains  17  labels\n",
            "RainToday  contains  3  labels\n",
            "RainTomorrow  contains  3  labels\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Date'] = pd.to_datetime(df['Date'])\n",
        "df['Date'].dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OHllLasdgSWT",
        "outputId": "5bff2003-1bfc-4493-a321-bb420a853490"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dtype('<M8[ns]')"
            ]
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JvbTu-ksgfEj",
        "outputId": "c2bfc360-7a77-43dd-b0d9-a15e1618291b"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 145460 entries, 0 to 145459\n",
            "Data columns (total 23 columns):\n",
            " #   Column         Non-Null Count   Dtype         \n",
            "---  ------         --------------   -----         \n",
            " 0   Date           145460 non-null  datetime64[ns]\n",
            " 1   Location       145460 non-null  object        \n",
            " 2   MinTemp        143975 non-null  float64       \n",
            " 3   MaxTemp        144199 non-null  float64       \n",
            " 4   Rainfall       142199 non-null  float64       \n",
            " 5   Evaporation    82670 non-null   float64       \n",
            " 6   Sunshine       75625 non-null   float64       \n",
            " 7   WindGustDir    135134 non-null  object        \n",
            " 8   WindGustSpeed  135197 non-null  float64       \n",
            " 9   WindDir9am     134894 non-null  object        \n",
            " 10  WindDir3pm     141232 non-null  object        \n",
            " 11  WindSpeed9am   143693 non-null  float64       \n",
            " 12  WindSpeed3pm   142398 non-null  float64       \n",
            " 13  Humidity9am    142806 non-null  float64       \n",
            " 14  Humidity3pm    140953 non-null  float64       \n",
            " 15  Pressure9am    130395 non-null  float64       \n",
            " 16  Pressure3pm    130432 non-null  float64       \n",
            " 17  Cloud9am       89572 non-null   float64       \n",
            " 18  Cloud3pm       86102 non-null   float64       \n",
            " 19  Temp9am        143693 non-null  float64       \n",
            " 20  Temp3pm        141851 non-null  float64       \n",
            " 21  RainToday      142199 non-null  object        \n",
            " 22  RainTomorrow   142193 non-null  object        \n",
            "dtypes: datetime64[ns](1), float64(16), object(6)\n",
            "memory usage: 25.5+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# extract year from date\n",
        "\n",
        "df['Year'] = df['Date'].dt.year\n",
        "\n",
        "df['Year'].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "Ea5n9XvzhAEa",
        "outputId": "16c6dd5d-7ef1-40ab-9453-7984c9412f4c"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    2008\n",
              "1    2008\n",
              "2    2008\n",
              "3    2008\n",
              "4    2008\n",
              "Name: Year, dtype: int32"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2008</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int32</label>"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Month'] = df['Date'].dt.month\n",
        "\n",
        "df['Month'].head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "5AmbiYQNhP1U",
        "outputId": "df58f694-9013-42ed-d637-c87f62d2e806"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    12\n",
              "1    12\n",
              "2    12\n",
              "3    12\n",
              "4    12\n",
              "Name: Month, dtype: int32"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int32</label>"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Day'] = df['Date'].dt.day\n",
        "\n",
        "df['Day'].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "MQwlEZxCh4vv",
        "outputId": "020416dd-2320-41ac-a138-aaf997d350bb"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    1\n",
              "1    2\n",
              "2    3\n",
              "3    4\n",
              "4    5\n",
              "Name: Day, dtype: int32"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Day</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int32</label>"
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pp5Ooeszh_Dt",
        "outputId": "719878c4-2324-46db-f1c0-3515979ca5fa"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 145460 entries, 0 to 145459\n",
            "Data columns (total 26 columns):\n",
            " #   Column         Non-Null Count   Dtype         \n",
            "---  ------         --------------   -----         \n",
            " 0   Date           145460 non-null  datetime64[ns]\n",
            " 1   Location       145460 non-null  object        \n",
            " 2   MinTemp        143975 non-null  float64       \n",
            " 3   MaxTemp        144199 non-null  float64       \n",
            " 4   Rainfall       142199 non-null  float64       \n",
            " 5   Evaporation    82670 non-null   float64       \n",
            " 6   Sunshine       75625 non-null   float64       \n",
            " 7   WindGustDir    135134 non-null  object        \n",
            " 8   WindGustSpeed  135197 non-null  float64       \n",
            " 9   WindDir9am     134894 non-null  object        \n",
            " 10  WindDir3pm     141232 non-null  object        \n",
            " 11  WindSpeed9am   143693 non-null  float64       \n",
            " 12  WindSpeed3pm   142398 non-null  float64       \n",
            " 13  Humidity9am    142806 non-null  float64       \n",
            " 14  Humidity3pm    140953 non-null  float64       \n",
            " 15  Pressure9am    130395 non-null  float64       \n",
            " 16  Pressure3pm    130432 non-null  float64       \n",
            " 17  Cloud9am       89572 non-null   float64       \n",
            " 18  Cloud3pm       86102 non-null   float64       \n",
            " 19  Temp9am        143693 non-null  float64       \n",
            " 20  Temp3pm        141851 non-null  float64       \n",
            " 21  RainToday      142199 non-null  object        \n",
            " 22  RainTomorrow   142193 non-null  object        \n",
            " 23  Year           145460 non-null  int32         \n",
            " 24  Month          145460 non-null  int32         \n",
            " 25  Day            145460 non-null  int32         \n",
            "dtypes: datetime64[ns](1), float64(16), int32(3), object(6)\n",
            "memory usage: 27.2+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# drop the original Date variable\n",
        "\n",
        "df.drop('Date', axis=1, inplace = True)\n"
      ],
      "metadata": {
        "id": "0OVDUwuJiQuI"
      },
      "execution_count": 95,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "kIZzSAU1ikQY",
        "outputId": "83989cd4-1611-4bfb-ef9f-83bd1c031bff"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Location  MinTemp  MaxTemp  Rainfall  Evaporation  Sunshine  \\\n",
              "0        Albury     13.4     22.9       0.6          NaN       NaN   \n",
              "1        Albury      7.4     25.1       0.0          NaN       NaN   \n",
              "2        Albury     12.9     25.7       0.0          NaN       NaN   \n",
              "3        Albury      9.2     28.0       0.0          NaN       NaN   \n",
              "4        Albury     17.5     32.3       1.0          NaN       NaN   \n",
              "...         ...      ...      ...       ...          ...       ...   \n",
              "145455    Uluru      2.8     23.4       0.0          NaN       NaN   \n",
              "145456    Uluru      3.6     25.3       0.0          NaN       NaN   \n",
              "145457    Uluru      5.4     26.9       0.0          NaN       NaN   \n",
              "145458    Uluru      7.8     27.0       0.0          NaN       NaN   \n",
              "145459    Uluru     14.9      NaN       0.0          NaN       NaN   \n",
              "\n",
              "       WindGustDir  WindGustSpeed WindDir9am WindDir3pm  ...  Pressure3pm  \\\n",
              "0                W           44.0          W        WNW  ...       1007.1   \n",
              "1              WNW           44.0        NNW        WSW  ...       1007.8   \n",
              "2              WSW           46.0          W        WSW  ...       1008.7   \n",
              "3               NE           24.0         SE          E  ...       1012.8   \n",
              "4                W           41.0        ENE         NW  ...       1006.0   \n",
              "...            ...            ...        ...        ...  ...          ...   \n",
              "145455           E           31.0         SE        ENE  ...       1020.3   \n",
              "145456         NNW           22.0         SE          N  ...       1019.1   \n",
              "145457           N           37.0         SE        WNW  ...       1016.8   \n",
              "145458          SE           28.0        SSE          N  ...       1016.5   \n",
              "145459         NaN            NaN        ESE        ESE  ...       1017.9   \n",
              "\n",
              "        Cloud9am  Cloud3pm  Temp9am  Temp3pm  RainToday  RainTomorrow  Year  \\\n",
              "0            8.0       NaN     16.9     21.8         No            No  2008   \n",
              "1            NaN       NaN     17.2     24.3         No            No  2008   \n",
              "2            NaN       2.0     21.0     23.2         No            No  2008   \n",
              "3            NaN       NaN     18.1     26.5         No            No  2008   \n",
              "4            7.0       8.0     17.8     29.7         No            No  2008   \n",
              "...          ...       ...      ...      ...        ...           ...   ...   \n",
              "145455       NaN       NaN     10.1     22.4         No            No  2017   \n",
              "145456       NaN       NaN     10.9     24.5         No            No  2017   \n",
              "145457       NaN       NaN     12.5     26.1         No            No  2017   \n",
              "145458       3.0       2.0     15.1     26.0         No            No  2017   \n",
              "145459       8.0       8.0     15.0     20.9         No           NaN  2017   \n",
              "\n",
              "        Month  Day  \n",
              "0          12    1  \n",
              "1          12    2  \n",
              "2          12    3  \n",
              "3          12    4  \n",
              "4          12    5  \n",
              "...       ...  ...  \n",
              "145455      6   21  \n",
              "145456      6   22  \n",
              "145457      6   23  \n",
              "145458      6   24  \n",
              "145459      6   25  \n",
              "\n",
              "[145460 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1b86c681-1033-45ed-8d2c-c68ad255e41c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>MinTemp</th>\n",
              "      <th>MaxTemp</th>\n",
              "      <th>Rainfall</th>\n",
              "      <th>Evaporation</th>\n",
              "      <th>Sunshine</th>\n",
              "      <th>WindGustDir</th>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <th>WindDir9am</th>\n",
              "      <th>WindDir3pm</th>\n",
              "      <th>...</th>\n",
              "      <th>Pressure3pm</th>\n",
              "      <th>Cloud9am</th>\n",
              "      <th>Cloud3pm</th>\n",
              "      <th>Temp9am</th>\n",
              "      <th>Temp3pm</th>\n",
              "      <th>RainToday</th>\n",
              "      <th>RainTomorrow</th>\n",
              "      <th>Year</th>\n",
              "      <th>Month</th>\n",
              "      <th>Day</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Albury</td>\n",
              "      <td>13.4</td>\n",
              "      <td>22.9</td>\n",
              "      <td>0.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>W</td>\n",
              "      <td>44.0</td>\n",
              "      <td>W</td>\n",
              "      <td>WNW</td>\n",
              "      <td>...</td>\n",
              "      <td>1007.1</td>\n",
              "      <td>8.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>16.9</td>\n",
              "      <td>21.8</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>2008</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Albury</td>\n",
              "      <td>7.4</td>\n",
              "      <td>25.1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>WNW</td>\n",
              "      <td>44.0</td>\n",
              "      <td>NNW</td>\n",
              "      <td>WSW</td>\n",
              "      <td>...</td>\n",
              "      <td>1007.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>17.2</td>\n",
              "      <td>24.3</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>2008</td>\n",
              "      <td>12</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Albury</td>\n",
              "      <td>12.9</td>\n",
              "      <td>25.7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>WSW</td>\n",
              "      <td>46.0</td>\n",
              "      <td>W</td>\n",
              "      <td>WSW</td>\n",
              "      <td>...</td>\n",
              "      <td>1008.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>23.2</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>2008</td>\n",
              "      <td>12</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Albury</td>\n",
              "      <td>9.2</td>\n",
              "      <td>28.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NE</td>\n",
              "      <td>24.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>E</td>\n",
              "      <td>...</td>\n",
              "      <td>1012.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>18.1</td>\n",
              "      <td>26.5</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>2008</td>\n",
              "      <td>12</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Albury</td>\n",
              "      <td>17.5</td>\n",
              "      <td>32.3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>W</td>\n",
              "      <td>41.0</td>\n",
              "      <td>ENE</td>\n",
              "      <td>NW</td>\n",
              "      <td>...</td>\n",
              "      <td>1006.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>17.8</td>\n",
              "      <td>29.7</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>2008</td>\n",
              "      <td>12</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145455</th>\n",
              "      <td>Uluru</td>\n",
              "      <td>2.8</td>\n",
              "      <td>23.4</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>E</td>\n",
              "      <td>31.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>ENE</td>\n",
              "      <td>...</td>\n",
              "      <td>1020.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10.1</td>\n",
              "      <td>22.4</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>2017</td>\n",
              "      <td>6</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145456</th>\n",
              "      <td>Uluru</td>\n",
              "      <td>3.6</td>\n",
              "      <td>25.3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NNW</td>\n",
              "      <td>22.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>N</td>\n",
              "      <td>...</td>\n",
              "      <td>1019.1</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10.9</td>\n",
              "      <td>24.5</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>2017</td>\n",
              "      <td>6</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145457</th>\n",
              "      <td>Uluru</td>\n",
              "      <td>5.4</td>\n",
              "      <td>26.9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>N</td>\n",
              "      <td>37.0</td>\n",
              "      <td>SE</td>\n",
              "      <td>WNW</td>\n",
              "      <td>...</td>\n",
              "      <td>1016.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.5</td>\n",
              "      <td>26.1</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>2017</td>\n",
              "      <td>6</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145458</th>\n",
              "      <td>Uluru</td>\n",
              "      <td>7.8</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>SE</td>\n",
              "      <td>28.0</td>\n",
              "      <td>SSE</td>\n",
              "      <td>N</td>\n",
              "      <td>...</td>\n",
              "      <td>1016.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>15.1</td>\n",
              "      <td>26.0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>2017</td>\n",
              "      <td>6</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145459</th>\n",
              "      <td>Uluru</td>\n",
              "      <td>14.9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>ESE</td>\n",
              "      <td>ESE</td>\n",
              "      <td>...</td>\n",
              "      <td>1017.9</td>\n",
              "      <td>8.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>20.9</td>\n",
              "      <td>No</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2017</td>\n",
              "      <td>6</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>145460 rows × 25 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b86c681-1033-45ed-8d2c-c68ad255e41c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1b86c681-1033-45ed-8d2c-c68ad255e41c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1b86c681-1033-45ed-8d2c-c68ad255e41c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e3fecc53-8bcb-4d65-8733-281c455fd21a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e3fecc53-8bcb-4d65-8733-281c455fd21a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e3fecc53-8bcb-4d65-8733-281c455fd21a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_2f2441f4-d0f4-428a-b9f8-b74bb1b56cd0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2f2441f4-d0f4-428a-b9f8-b74bb1b56cd0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(df['Location'].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gai2Mzbaisd4",
        "outputId": "8a3796f0-e4e8-491e-c638-2438aaa508ff"
      },
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "49"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Location'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "XHgfu5AsjBGW",
        "outputId": "34a7b3bb-db62-445d-feeb-5bb21ccd5406",
        "collapsed": true
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Location\n",
              "Canberra            3436\n",
              "Sydney              3344\n",
              "Darwin              3193\n",
              "Melbourne           3193\n",
              "Brisbane            3193\n",
              "Adelaide            3193\n",
              "Perth               3193\n",
              "Hobart              3193\n",
              "Albany              3040\n",
              "MountGambier        3040\n",
              "Ballarat            3040\n",
              "Townsville          3040\n",
              "GoldCoast           3040\n",
              "Cairns              3040\n",
              "Launceston          3040\n",
              "AliceSprings        3040\n",
              "Bendigo             3040\n",
              "Albury              3040\n",
              "MountGinini         3040\n",
              "Wollongong          3040\n",
              "Newcastle           3039\n",
              "Tuggeranong         3039\n",
              "Penrith             3039\n",
              "Woomera             3009\n",
              "Nuriootpa           3009\n",
              "Cobar               3009\n",
              "CoffsHarbour        3009\n",
              "Moree               3009\n",
              "Sale                3009\n",
              "PerthAirport        3009\n",
              "PearceRAAF          3009\n",
              "Witchcliffe         3009\n",
              "BadgerysCreek       3009\n",
              "Mildura             3009\n",
              "NorfolkIsland       3009\n",
              "MelbourneAirport    3009\n",
              "Richmond            3009\n",
              "SydneyAirport       3009\n",
              "WaggaWagga          3009\n",
              "Williamtown         3009\n",
              "Dartmoor            3009\n",
              "Watsonia            3009\n",
              "Portland            3009\n",
              "Walpole             3006\n",
              "NorahHead           3004\n",
              "SalmonGums          3001\n",
              "Katherine           1578\n",
              "Nhil                1578\n",
              "Uluru               1578\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Location</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Canberra</th>\n",
              "      <td>3436</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sydney</th>\n",
              "      <td>3344</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Darwin</th>\n",
              "      <td>3193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Melbourne</th>\n",
              "      <td>3193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Brisbane</th>\n",
              "      <td>3193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Adelaide</th>\n",
              "      <td>3193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Perth</th>\n",
              "      <td>3193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Hobart</th>\n",
              "      <td>3193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Albany</th>\n",
              "      <td>3040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MountGambier</th>\n",
              "      <td>3040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ballarat</th>\n",
              "      <td>3040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Townsville</th>\n",
              "      <td>3040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>GoldCoast</th>\n",
              "      <td>3040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cairns</th>\n",
              "      <td>3040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Launceston</th>\n",
              "      <td>3040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AliceSprings</th>\n",
              "      <td>3040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bendigo</th>\n",
              "      <td>3040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Albury</th>\n",
              "      <td>3040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MountGinini</th>\n",
              "      <td>3040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Wollongong</th>\n",
              "      <td>3040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Newcastle</th>\n",
              "      <td>3039</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Tuggeranong</th>\n",
              "      <td>3039</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Penrith</th>\n",
              "      <td>3039</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Woomera</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Nuriootpa</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cobar</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CoffsHarbour</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Moree</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sale</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PerthAirport</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PearceRAAF</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Witchcliffe</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BadgerysCreek</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mildura</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NorfolkIsland</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MelbourneAirport</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Richmond</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SydneyAirport</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WaggaWagga</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Williamtown</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Dartmoor</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Watsonia</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Portland</th>\n",
              "      <td>3009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Walpole</th>\n",
              "      <td>3006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NorahHead</th>\n",
              "      <td>3004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SalmonGums</th>\n",
              "      <td>3001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Katherine</th>\n",
              "      <td>1578</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Nhil</th>\n",
              "      <td>1578</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Uluru</th>\n",
              "      <td>1578</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#find catagorical variable\n",
        "categorical = [var for var in df.columns if df[var].dtype == 'O']\n",
        "\n",
        "print('There are {} categorical variables\\n'.format(len(categorical)))\n",
        "\n",
        "print('The categorical variables are: ', categorical)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lr_QCok3HXoy",
        "outputId": "fea75f24-5b40-4b8c-9523-60d3e4b7d8ac"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 6 categorical variables\n",
            "\n",
            "The categorical variables are:  ['Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm', 'RainToday', 'RainTomorrow']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[categorical].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "UT039QXmHmxQ",
        "outputId": "f7900afc-58f6-4c3c-c0c6-81d676218218"
      },
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Location            0\n",
              "WindGustDir     10326\n",
              "WindDir9am      10566\n",
              "WindDir3pm       4228\n",
              "RainToday        3261\n",
              "RainTomorrow     3267\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Location</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindGustDir</th>\n",
              "      <td>10326</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindDir9am</th>\n",
              "      <td>10566</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindDir3pm</th>\n",
              "      <td>4228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RainToday</th>\n",
              "      <td>3261</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RainTomorrow</th>\n",
              "      <td>3267</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(df['Location'].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IGenrhMJINd0",
        "outputId": "5df1af2a-64a0-49c4-a07e-e2b13e63ede9"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "49"
            ]
          },
          "metadata": {},
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.get_dummies(df.Location, drop_first=True).head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "b_98XVt6IOcl",
        "outputId": "401bb91f-c24f-4804-ca68-36a5f0e3ce2b"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Albany  Albury  AliceSprings  BadgerysCreek  Ballarat  Bendigo  Brisbane  \\\n",
              "0   False    True         False          False     False    False     False   \n",
              "1   False    True         False          False     False    False     False   \n",
              "2   False    True         False          False     False    False     False   \n",
              "3   False    True         False          False     False    False     False   \n",
              "4   False    True         False          False     False    False     False   \n",
              "\n",
              "   Cairns  Canberra  Cobar  ...  Townsville  Tuggeranong  Uluru  WaggaWagga  \\\n",
              "0   False     False  False  ...       False        False  False       False   \n",
              "1   False     False  False  ...       False        False  False       False   \n",
              "2   False     False  False  ...       False        False  False       False   \n",
              "3   False     False  False  ...       False        False  False       False   \n",
              "4   False     False  False  ...       False        False  False       False   \n",
              "\n",
              "   Walpole  Watsonia  Williamtown  Witchcliffe  Wollongong  Woomera  \n",
              "0    False     False        False        False       False    False  \n",
              "1    False     False        False        False       False    False  \n",
              "2    False     False        False        False       False    False  \n",
              "3    False     False        False        False       False    False  \n",
              "4    False     False        False        False       False    False  \n",
              "\n",
              "[5 rows x 48 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-49fd360b-c2fa-4634-86ec-96ee3a5d9e49\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Albany</th>\n",
              "      <th>Albury</th>\n",
              "      <th>AliceSprings</th>\n",
              "      <th>BadgerysCreek</th>\n",
              "      <th>Ballarat</th>\n",
              "      <th>Bendigo</th>\n",
              "      <th>Brisbane</th>\n",
              "      <th>Cairns</th>\n",
              "      <th>Canberra</th>\n",
              "      <th>Cobar</th>\n",
              "      <th>...</th>\n",
              "      <th>Townsville</th>\n",
              "      <th>Tuggeranong</th>\n",
              "      <th>Uluru</th>\n",
              "      <th>WaggaWagga</th>\n",
              "      <th>Walpole</th>\n",
              "      <th>Watsonia</th>\n",
              "      <th>Williamtown</th>\n",
              "      <th>Witchcliffe</th>\n",
              "      <th>Wollongong</th>\n",
              "      <th>Woomera</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 48 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49fd360b-c2fa-4634-86ec-96ee3a5d9e49')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-49fd360b-c2fa-4634-86ec-96ee3a5d9e49 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-49fd360b-c2fa-4634-86ec-96ee3a5d9e49');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cdc4f38c-1b0e-468e-be50-4672e51705c0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cdc4f38c-1b0e-468e-be50-4672e51705c0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cdc4f38c-1b0e-468e-be50-4672e51705c0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(df['WindGustDir'].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8SqJLKrxI83U",
        "outputId": "1a36ec82-c11d-404e-8eac-3d33fc36b145"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "17"
            ]
          },
          "metadata": {},
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.get_dummies(df.WindGustDir, drop_first=True, dummy_na = True).head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "6M-3HT2iKiCR",
        "outputId": "5450a97c-8de6-4da3-f6f3-f978efd900c3"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     ENE    ESE      N     NE    NNE    NNW     NW      S     SE    SSE  \\\n",
              "0  False  False  False  False  False  False  False  False  False  False   \n",
              "1  False  False  False  False  False  False  False  False  False  False   \n",
              "2  False  False  False  False  False  False  False  False  False  False   \n",
              "3  False  False  False   True  False  False  False  False  False  False   \n",
              "4  False  False  False  False  False  False  False  False  False  False   \n",
              "\n",
              "     SSW     SW      W    WNW    WSW    NaN  \n",
              "0  False  False   True  False  False  False  \n",
              "1  False  False  False   True  False  False  \n",
              "2  False  False  False  False   True  False  \n",
              "3  False  False  False  False  False  False  \n",
              "4  False  False   True  False  False  False  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-53b33344-c306-4d50-9fd4-db66ce4ad612\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ENE</th>\n",
              "      <th>ESE</th>\n",
              "      <th>N</th>\n",
              "      <th>NE</th>\n",
              "      <th>NNE</th>\n",
              "      <th>NNW</th>\n",
              "      <th>NW</th>\n",
              "      <th>S</th>\n",
              "      <th>SE</th>\n",
              "      <th>SSE</th>\n",
              "      <th>SSW</th>\n",
              "      <th>SW</th>\n",
              "      <th>W</th>\n",
              "      <th>WNW</th>\n",
              "      <th>WSW</th>\n",
              "      <th>NaN</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-53b33344-c306-4d50-9fd4-db66ce4ad612')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-53b33344-c306-4d50-9fd4-db66ce4ad612 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-53b33344-c306-4d50-9fd4-db66ce4ad612');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-053ffe8c-490c-45e2-8f5c-cf94f84cfe79\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-053ffe8c-490c-45e2-8f5c-cf94f84cfe79')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-053ffe8c-490c-45e2-8f5c-cf94f84cfe79 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(df['WindDir9am'].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zcUrPAh5K_Lw",
        "outputId": "b3d2c7f0-59bd-472d-ed8c-b6fe6db92e94"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "17"
            ]
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.get_dummies(df.WindDir9am, drop_first = True, dummy_na = True).head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "FwffAyYuLCIi",
        "outputId": "a81d34f6-50f0-4cb1-c218-ca89ddc76345"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     ENE    ESE      N     NE    NNE    NNW     NW      S     SE    SSE  \\\n",
              "0  False  False  False  False  False  False  False  False  False  False   \n",
              "1  False  False  False  False  False   True  False  False  False  False   \n",
              "2  False  False  False  False  False  False  False  False  False  False   \n",
              "3  False  False  False  False  False  False  False  False   True  False   \n",
              "4   True  False  False  False  False  False  False  False  False  False   \n",
              "\n",
              "     SSW     SW      W    WNW    WSW    NaN  \n",
              "0  False  False   True  False  False  False  \n",
              "1  False  False  False  False  False  False  \n",
              "2  False  False   True  False  False  False  \n",
              "3  False  False  False  False  False  False  \n",
              "4  False  False  False  False  False  False  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b1089964-b1a1-44e9-aa92-d7bc9362e0f4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ENE</th>\n",
              "      <th>ESE</th>\n",
              "      <th>N</th>\n",
              "      <th>NE</th>\n",
              "      <th>NNE</th>\n",
              "      <th>NNW</th>\n",
              "      <th>NW</th>\n",
              "      <th>S</th>\n",
              "      <th>SE</th>\n",
              "      <th>SSE</th>\n",
              "      <th>SSW</th>\n",
              "      <th>SW</th>\n",
              "      <th>W</th>\n",
              "      <th>WNW</th>\n",
              "      <th>WSW</th>\n",
              "      <th>NaN</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b1089964-b1a1-44e9-aa92-d7bc9362e0f4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b1089964-b1a1-44e9-aa92-d7bc9362e0f4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b1089964-b1a1-44e9-aa92-d7bc9362e0f4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-433ff8f8-4d29-4614-85b7-250043f97019\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-433ff8f8-4d29-4614-85b7-250043f97019')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-433ff8f8-4d29-4614-85b7-250043f97019 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(df['WindDir3pm'].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dhi2FrZ-LM5I",
        "outputId": "87c08ad7-b8b0-4e07-acc6-66058c4e615a"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "17"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.get_dummies(df.WindDir3pm, drop_first = True, dummy_na = True).head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "XLj6aRyFLPv_",
        "outputId": "0678d6a7-a429-4d1e-ac50-32b219e9f069"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     ENE    ESE      N     NE    NNE    NNW     NW      S     SE    SSE  \\\n",
              "0  False  False  False  False  False  False  False  False  False  False   \n",
              "1  False  False  False  False  False  False  False  False  False  False   \n",
              "2  False  False  False  False  False  False  False  False  False  False   \n",
              "3  False  False  False  False  False  False  False  False  False  False   \n",
              "4  False  False  False  False  False  False   True  False  False  False   \n",
              "\n",
              "     SSW     SW      W    WNW    WSW    NaN  \n",
              "0  False  False  False   True  False  False  \n",
              "1  False  False  False  False   True  False  \n",
              "2  False  False  False  False   True  False  \n",
              "3  False  False  False  False  False  False  \n",
              "4  False  False  False  False  False  False  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-71a06770-785d-4fd7-b040-62fc6cb490c8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ENE</th>\n",
              "      <th>ESE</th>\n",
              "      <th>N</th>\n",
              "      <th>NE</th>\n",
              "      <th>NNE</th>\n",
              "      <th>NNW</th>\n",
              "      <th>NW</th>\n",
              "      <th>S</th>\n",
              "      <th>SE</th>\n",
              "      <th>SSE</th>\n",
              "      <th>SSW</th>\n",
              "      <th>SW</th>\n",
              "      <th>W</th>\n",
              "      <th>WNW</th>\n",
              "      <th>WSW</th>\n",
              "      <th>NaN</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-71a06770-785d-4fd7-b040-62fc6cb490c8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-71a06770-785d-4fd7-b040-62fc6cb490c8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-71a06770-785d-4fd7-b040-62fc6cb490c8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d892bfcb-98bd-46bb-a759-12d46cf357df\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d892bfcb-98bd-46bb-a759-12d46cf357df')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d892bfcb-98bd-46bb-a759-12d46cf357df button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(df['RainToday'].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qjiOd_lpLVSv",
        "outputId": "0c163606-d378-4a06-f1e6-96e63299480f"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.get_dummies(df.RainToday, drop_first=True, dummy_na=True).head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "8Av50JyTLd7K",
        "outputId": "6d198a84-15e1-486b-9501-fb367902ef21"
      },
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Yes    NaN\n",
              "0  False  False\n",
              "1  False  False\n",
              "2  False  False\n",
              "3  False  False\n",
              "4  False  False"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b24d95ee-f1d2-4b8d-8e54-a2207dd8f398\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Yes</th>\n",
              "      <th>NaN</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b24d95ee-f1d2-4b8d-8e54-a2207dd8f398')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b24d95ee-f1d2-4b8d-8e54-a2207dd8f398 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b24d95ee-f1d2-4b8d-8e54-a2207dd8f398');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8ef8ead9-a9cf-4a80-82dd-0a5ca8dfeab6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8ef8ead9-a9cf-4a80-82dd-0a5ca8dfeab6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8ef8ead9-a9cf-4a80-82dd-0a5ca8dfeab6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 110
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(df['RainTomorrow'].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1D1Og_yVLnwY",
        "outputId": "43a98e96-ea54-4477-8fbc-2093559958c4"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.get_dummies(df.RainTomorrow, drop_first = True, dummy_na = True).head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "9Hi0MjM3LwHn",
        "outputId": "a6cc5d7c-51e0-4ec5-9ec6-c2129a47b581"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Yes    NaN\n",
              "0  False  False\n",
              "1  False  False\n",
              "2  False  False\n",
              "3  False  False\n",
              "4  False  False"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dac92e2c-ec24-403f-9c74-adf4b90d42b8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Yes</th>\n",
              "      <th>NaN</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dac92e2c-ec24-403f-9c74-adf4b90d42b8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dac92e2c-ec24-403f-9c74-adf4b90d42b8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dac92e2c-ec24-403f-9c74-adf4b90d42b8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7bd8742c-6deb-408e-918d-6e413db55a36\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7bd8742c-6deb-408e-918d-6e413db55a36')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7bd8742c-6deb-408e-918d-6e413db55a36 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " **Explore Numerical Variable**"
      ],
      "metadata": {
        "id": "ytgXU1FSNRTP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numeric = [var for var in df.columns if df[var].dtype != 'O']\n",
        "\n",
        "print('There are {} numerical variables\\n'.format(len(numeric)))\n",
        "\n",
        "print('The numerical variables are :', numeric)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hpXVb7tUNfk2",
        "outputId": "78a9db33-b073-407d-8ed7-7df5556a811a"
      },
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 19 numerical variables\n",
            "\n",
            "The numerical variables are : ['MinTemp', 'MaxTemp', 'Rainfall', 'Evaporation', 'Sunshine', 'WindGustSpeed', 'WindSpeed9am', 'WindSpeed3pm', 'Humidity9am', 'Humidity3pm', 'Pressure9am', 'Pressure3pm', 'Cloud9am', 'Cloud3pm', 'Temp9am', 'Temp3pm', 'Year', 'Month', 'Day']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[numeric].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "iM8WvFxINwUw",
        "outputId": "612a65ee-4aeb-4df3-e3bd-eae716c7664a"
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   MinTemp  MaxTemp  Rainfall  Evaporation  Sunshine  WindGustSpeed  \\\n",
              "0     13.4     22.9       0.6          NaN       NaN           44.0   \n",
              "1      7.4     25.1       0.0          NaN       NaN           44.0   \n",
              "2     12.9     25.7       0.0          NaN       NaN           46.0   \n",
              "3      9.2     28.0       0.0          NaN       NaN           24.0   \n",
              "4     17.5     32.3       1.0          NaN       NaN           41.0   \n",
              "\n",
              "   WindSpeed9am  WindSpeed3pm  Humidity9am  Humidity3pm  Pressure9am  \\\n",
              "0          20.0          24.0         71.0         22.0       1007.7   \n",
              "1           4.0          22.0         44.0         25.0       1010.6   \n",
              "2          19.0          26.0         38.0         30.0       1007.6   \n",
              "3          11.0           9.0         45.0         16.0       1017.6   \n",
              "4           7.0          20.0         82.0         33.0       1010.8   \n",
              "\n",
              "   Pressure3pm  Cloud9am  Cloud3pm  Temp9am  Temp3pm  Year  Month  Day  \n",
              "0       1007.1       8.0       NaN     16.9     21.8  2008     12    1  \n",
              "1       1007.8       NaN       NaN     17.2     24.3  2008     12    2  \n",
              "2       1008.7       NaN       2.0     21.0     23.2  2008     12    3  \n",
              "3       1012.8       NaN       NaN     18.1     26.5  2008     12    4  \n",
              "4       1006.0       7.0       8.0     17.8     29.7  2008     12    5  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4c3f0bd9-08a1-4bdb-8409-33a942d56ebc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MinTemp</th>\n",
              "      <th>MaxTemp</th>\n",
              "      <th>Rainfall</th>\n",
              "      <th>Evaporation</th>\n",
              "      <th>Sunshine</th>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <th>WindSpeed9am</th>\n",
              "      <th>WindSpeed3pm</th>\n",
              "      <th>Humidity9am</th>\n",
              "      <th>Humidity3pm</th>\n",
              "      <th>Pressure9am</th>\n",
              "      <th>Pressure3pm</th>\n",
              "      <th>Cloud9am</th>\n",
              "      <th>Cloud3pm</th>\n",
              "      <th>Temp9am</th>\n",
              "      <th>Temp3pm</th>\n",
              "      <th>Year</th>\n",
              "      <th>Month</th>\n",
              "      <th>Day</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>13.4</td>\n",
              "      <td>22.9</td>\n",
              "      <td>0.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>44.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1007.7</td>\n",
              "      <td>1007.1</td>\n",
              "      <td>8.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>16.9</td>\n",
              "      <td>21.8</td>\n",
              "      <td>2008</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.4</td>\n",
              "      <td>25.1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>44.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>1010.6</td>\n",
              "      <td>1007.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>17.2</td>\n",
              "      <td>24.3</td>\n",
              "      <td>2008</td>\n",
              "      <td>12</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>12.9</td>\n",
              "      <td>25.7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>46.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>1007.6</td>\n",
              "      <td>1008.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>23.2</td>\n",
              "      <td>2008</td>\n",
              "      <td>12</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>9.2</td>\n",
              "      <td>28.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>24.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>1017.6</td>\n",
              "      <td>1012.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>18.1</td>\n",
              "      <td>26.5</td>\n",
              "      <td>2008</td>\n",
              "      <td>12</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17.5</td>\n",
              "      <td>32.3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>41.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>33.0</td>\n",
              "      <td>1010.8</td>\n",
              "      <td>1006.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>17.8</td>\n",
              "      <td>29.7</td>\n",
              "      <td>2008</td>\n",
              "      <td>12</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c3f0bd9-08a1-4bdb-8409-33a942d56ebc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4c3f0bd9-08a1-4bdb-8409-33a942d56ebc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4c3f0bd9-08a1-4bdb-8409-33a942d56ebc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-97d1f5f3-f4fa-459b-b997-1a11fe7a8eed\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97d1f5f3-f4fa-459b-b997-1a11fe7a8eed')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-97d1f5f3-f4fa-459b-b997-1a11fe7a8eed button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[numeric]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"MinTemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.9366229181876182,\n        \"min\": 7.4,\n        \"max\": 17.5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.4,\n          17.5,\n          12.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaxTemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.5707142142714243,\n        \"min\": 22.9,\n        \"max\": 32.3,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          25.1,\n          32.3,\n          25.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rainfall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4604345773288535,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.6,\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Evaporation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sunshine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WindGustSpeed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.011104260855047,\n        \"min\": 24.0,\n        \"max\": 46.0,\n        \"num_unique_values\": 4,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WindSpeed9am\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.12039324756716,\n        \"min\": 4.0,\n        \"max\": 20.0,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WindSpeed3pm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.648308055437864,\n        \"min\": 9.0,\n        \"max\": 26.0,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Humidity9am\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19.300259065618782,\n        \"min\": 38.0,\n        \"max\": 82.0,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Humidity3pm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.685805860178712,\n        \"min\": 16.0,\n        \"max\": 33.0,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pressure9am\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.0654643031270075,\n        \"min\": 1007.6,\n        \"max\": 1017.6,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pressure3pm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.6090228055729803,\n        \"min\": 1006.0,\n        \"max\": 1012.8,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud9am\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7071067811865476,\n        \"min\": 7.0,\n        \"max\": 8.0,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud3pm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.242640687119285,\n        \"min\": 2.0,\n        \"max\": 8.0,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temp9am\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.635542723379613,\n        \"min\": 16.9,\n        \"max\": 21.0,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temp3pm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.0927334188384226,\n        \"min\": 21.8,\n        \"max\": 29.7,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Day\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[numeric].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 680
        },
        "id": "W_AWWSvwN0qT",
        "outputId": "651a44be-c94c-4ab5-e9af-e1e4f708b2ba"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MinTemp           1485\n",
              "MaxTemp           1261\n",
              "Rainfall          3261\n",
              "Evaporation      62790\n",
              "Sunshine         69835\n",
              "WindGustSpeed    10263\n",
              "WindSpeed9am      1767\n",
              "WindSpeed3pm      3062\n",
              "Humidity9am       2654\n",
              "Humidity3pm       4507\n",
              "Pressure9am      15065\n",
              "Pressure3pm      15028\n",
              "Cloud9am         55888\n",
              "Cloud3pm         59358\n",
              "Temp9am           1767\n",
              "Temp3pm           3609\n",
              "Year                 0\n",
              "Month                0\n",
              "Day                  0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>MinTemp</th>\n",
              "      <td>1485</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaxTemp</th>\n",
              "      <td>1261</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rainfall</th>\n",
              "      <td>3261</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Evaporation</th>\n",
              "      <td>62790</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sunshine</th>\n",
              "      <td>69835</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <td>10263</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindSpeed9am</th>\n",
              "      <td>1767</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindSpeed3pm</th>\n",
              "      <td>3062</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Humidity9am</th>\n",
              "      <td>2654</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Humidity3pm</th>\n",
              "      <td>4507</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pressure9am</th>\n",
              "      <td>15065</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pressure3pm</th>\n",
              "      <td>15028</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cloud9am</th>\n",
              "      <td>55888</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cloud3pm</th>\n",
              "      <td>59358</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temp9am</th>\n",
              "      <td>1767</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temp3pm</th>\n",
              "      <td>3609</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Month</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Day</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 115
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[numeric].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "mIfdRO5QN_d7",
        "outputId": "1d0023a8-b419-4f8c-d5ae-7b638aea0362"
      },
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             MinTemp        MaxTemp       Rainfall   Evaporation  \\\n",
              "count  143975.000000  144199.000000  142199.000000  82670.000000   \n",
              "mean       12.194034      23.221348       2.360918      5.468232   \n",
              "std         6.398495       7.119049       8.478060      4.193704   \n",
              "min        -8.500000      -4.800000       0.000000      0.000000   \n",
              "25%         7.600000      17.900000       0.000000      2.600000   \n",
              "50%        12.000000      22.600000       0.000000      4.800000   \n",
              "75%        16.900000      28.200000       0.800000      7.400000   \n",
              "max        33.900000      48.100000     371.000000    145.000000   \n",
              "\n",
              "           Sunshine  WindGustSpeed   WindSpeed9am   WindSpeed3pm  \\\n",
              "count  75625.000000  135197.000000  143693.000000  142398.000000   \n",
              "mean       7.611178      40.035230      14.043426      18.662657   \n",
              "std        3.785483      13.607062       8.915375       8.809800   \n",
              "min        0.000000       6.000000       0.000000       0.000000   \n",
              "25%        4.800000      31.000000       7.000000      13.000000   \n",
              "50%        8.400000      39.000000      13.000000      19.000000   \n",
              "75%       10.600000      48.000000      19.000000      24.000000   \n",
              "max       14.500000     135.000000     130.000000      87.000000   \n",
              "\n",
              "         Humidity9am    Humidity3pm   Pressure9am    Pressure3pm  \\\n",
              "count  142806.000000  140953.000000  130395.00000  130432.000000   \n",
              "mean       68.880831      51.539116    1017.64994    1015.255889   \n",
              "std        19.029164      20.795902       7.10653       7.037414   \n",
              "min         0.000000       0.000000     980.50000     977.100000   \n",
              "25%        57.000000      37.000000    1012.90000    1010.400000   \n",
              "50%        70.000000      52.000000    1017.60000    1015.200000   \n",
              "75%        83.000000      66.000000    1022.40000    1020.000000   \n",
              "max       100.000000     100.000000    1041.00000    1039.600000   \n",
              "\n",
              "           Cloud9am      Cloud3pm        Temp9am       Temp3pm           Year  \\\n",
              "count  89572.000000  86102.000000  143693.000000  141851.00000  145460.000000   \n",
              "mean       4.447461      4.509930      16.990631      21.68339    2012.769751   \n",
              "std        2.887159      2.720357       6.488753       6.93665       2.537684   \n",
              "min        0.000000      0.000000      -7.200000      -5.40000    2007.000000   \n",
              "25%        1.000000      2.000000      12.300000      16.60000    2011.000000   \n",
              "50%        5.000000      5.000000      16.700000      21.10000    2013.000000   \n",
              "75%        7.000000      7.000000      21.600000      26.40000    2015.000000   \n",
              "max        9.000000      9.000000      40.200000      46.70000    2017.000000   \n",
              "\n",
              "               Month            Day  \n",
              "count  145460.000000  145460.000000  \n",
              "mean        6.399615      15.712258  \n",
              "std         3.427262       8.794789  \n",
              "min         1.000000       1.000000  \n",
              "25%         3.000000       8.000000  \n",
              "50%         6.000000      16.000000  \n",
              "75%         9.000000      23.000000  \n",
              "max        12.000000      31.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-72d241db-f5ab-4f15-a79b-2413fde59c8d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MinTemp</th>\n",
              "      <th>MaxTemp</th>\n",
              "      <th>Rainfall</th>\n",
              "      <th>Evaporation</th>\n",
              "      <th>Sunshine</th>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <th>WindSpeed9am</th>\n",
              "      <th>WindSpeed3pm</th>\n",
              "      <th>Humidity9am</th>\n",
              "      <th>Humidity3pm</th>\n",
              "      <th>Pressure9am</th>\n",
              "      <th>Pressure3pm</th>\n",
              "      <th>Cloud9am</th>\n",
              "      <th>Cloud3pm</th>\n",
              "      <th>Temp9am</th>\n",
              "      <th>Temp3pm</th>\n",
              "      <th>Year</th>\n",
              "      <th>Month</th>\n",
              "      <th>Day</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>143975.000000</td>\n",
              "      <td>144199.000000</td>\n",
              "      <td>142199.000000</td>\n",
              "      <td>82670.000000</td>\n",
              "      <td>75625.000000</td>\n",
              "      <td>135197.000000</td>\n",
              "      <td>143693.000000</td>\n",
              "      <td>142398.000000</td>\n",
              "      <td>142806.000000</td>\n",
              "      <td>140953.000000</td>\n",
              "      <td>130395.00000</td>\n",
              "      <td>130432.000000</td>\n",
              "      <td>89572.000000</td>\n",
              "      <td>86102.000000</td>\n",
              "      <td>143693.000000</td>\n",
              "      <td>141851.00000</td>\n",
              "      <td>145460.000000</td>\n",
              "      <td>145460.000000</td>\n",
              "      <td>145460.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>12.194034</td>\n",
              "      <td>23.221348</td>\n",
              "      <td>2.360918</td>\n",
              "      <td>5.468232</td>\n",
              "      <td>7.611178</td>\n",
              "      <td>40.035230</td>\n",
              "      <td>14.043426</td>\n",
              "      <td>18.662657</td>\n",
              "      <td>68.880831</td>\n",
              "      <td>51.539116</td>\n",
              "      <td>1017.64994</td>\n",
              "      <td>1015.255889</td>\n",
              "      <td>4.447461</td>\n",
              "      <td>4.509930</td>\n",
              "      <td>16.990631</td>\n",
              "      <td>21.68339</td>\n",
              "      <td>2012.769751</td>\n",
              "      <td>6.399615</td>\n",
              "      <td>15.712258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>6.398495</td>\n",
              "      <td>7.119049</td>\n",
              "      <td>8.478060</td>\n",
              "      <td>4.193704</td>\n",
              "      <td>3.785483</td>\n",
              "      <td>13.607062</td>\n",
              "      <td>8.915375</td>\n",
              "      <td>8.809800</td>\n",
              "      <td>19.029164</td>\n",
              "      <td>20.795902</td>\n",
              "      <td>7.10653</td>\n",
              "      <td>7.037414</td>\n",
              "      <td>2.887159</td>\n",
              "      <td>2.720357</td>\n",
              "      <td>6.488753</td>\n",
              "      <td>6.93665</td>\n",
              "      <td>2.537684</td>\n",
              "      <td>3.427262</td>\n",
              "      <td>8.794789</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-8.500000</td>\n",
              "      <td>-4.800000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>980.50000</td>\n",
              "      <td>977.100000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-7.200000</td>\n",
              "      <td>-5.40000</td>\n",
              "      <td>2007.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>7.600000</td>\n",
              "      <td>17.900000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.600000</td>\n",
              "      <td>4.800000</td>\n",
              "      <td>31.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>57.000000</td>\n",
              "      <td>37.000000</td>\n",
              "      <td>1012.90000</td>\n",
              "      <td>1010.400000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>12.300000</td>\n",
              "      <td>16.60000</td>\n",
              "      <td>2011.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>8.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>12.000000</td>\n",
              "      <td>22.600000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>4.800000</td>\n",
              "      <td>8.400000</td>\n",
              "      <td>39.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>19.000000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>1017.60000</td>\n",
              "      <td>1015.200000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>16.700000</td>\n",
              "      <td>21.10000</td>\n",
              "      <td>2013.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>16.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>16.900000</td>\n",
              "      <td>28.200000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>7.400000</td>\n",
              "      <td>10.600000</td>\n",
              "      <td>48.000000</td>\n",
              "      <td>19.000000</td>\n",
              "      <td>24.000000</td>\n",
              "      <td>83.000000</td>\n",
              "      <td>66.000000</td>\n",
              "      <td>1022.40000</td>\n",
              "      <td>1020.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>21.600000</td>\n",
              "      <td>26.40000</td>\n",
              "      <td>2015.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>23.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>33.900000</td>\n",
              "      <td>48.100000</td>\n",
              "      <td>371.000000</td>\n",
              "      <td>145.000000</td>\n",
              "      <td>14.500000</td>\n",
              "      <td>135.000000</td>\n",
              "      <td>130.000000</td>\n",
              "      <td>87.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>1041.00000</td>\n",
              "      <td>1039.600000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>40.200000</td>\n",
              "      <td>46.70000</td>\n",
              "      <td>2017.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-72d241db-f5ab-4f15-a79b-2413fde59c8d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-72d241db-f5ab-4f15-a79b-2413fde59c8d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-72d241db-f5ab-4f15-a79b-2413fde59c8d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-da9040d2-7659-40ad-b836-dfa83bc8ce40\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-da9040d2-7659-40ad-b836-dfa83bc8ce40')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-da9040d2-7659-40ad-b836-dfa83bc8ce40 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[numeric]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"MinTemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50898.7852892957,\n        \"min\": -8.5,\n        \"max\": 143975.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          12.19403438096892,\n          12.0,\n          143975.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MaxTemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50974.85841852006,\n        \"min\": -4.8,\n        \"max\": 144199.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          23.22134827564685,\n          22.6,\n          144199.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rainfall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50255.778414581844,\n        \"min\": 0.0,\n        \"max\": 142199.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          142199.0,\n          2.3609181499166656,\n          371.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Evaporation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29219.741370533065,\n        \"min\": 0.0,\n        \"max\": 82670.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.468231522922462,\n          4.8,\n          82670.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sunshine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26734.965465626912,\n        \"min\": 0.0,\n        \"max\": 75625.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.6111775206611565,\n          8.4,\n          75625.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WindGustSpeed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47783.58317859071,\n        \"min\": 6.0,\n        \"max\": 135197.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          40.03523007167319,\n          39.0,\n          135197.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WindSpeed9am\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50793.46953742816,\n        \"min\": 0.0,\n        \"max\": 143693.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.043425914971502,\n          13.0,\n          143693.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WindSpeed3pm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50336.6925776163,\n        \"min\": 0.0,\n        \"max\": 142398.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          18.662656778887342,\n          19.0,\n          142398.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Humidity9am\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50469.45865841999,\n        \"min\": 0.0,\n        \"max\": 142806.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          68.88083133761887,\n          70.0,\n          142806.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Humidity3pm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49817.88705434561,\n        \"min\": 0.0,\n        \"max\": 140953.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          51.5391158755046,\n          52.0,\n          140953.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pressure9am\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45794.902527110266,\n        \"min\": 7.106530287523588,\n        \"max\": 130395.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1017.6499397983052,\n          1017.6,\n          130395.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pressure3pm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45808.7130186032,\n        \"min\": 7.0374138081677975,\n        \"max\": 130432.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1015.2558888309618,\n          1015.2,\n          130432.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud9am\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31667.00281817111,\n        \"min\": 0.0,\n        \"max\": 89572.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.4474612602152455,\n          5.0,\n          89572.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud3pm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30440.12730861951,\n        \"min\": 0.0,\n        \"max\": 86102.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.509930082924903,\n          5.0,\n          86102.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temp9am\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50797.74079696554,\n        \"min\": -7.2,\n        \"max\": 143693.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          16.990631415587398,\n          16.7,\n          143693.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Temp3pm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50145.135225618586,\n        \"min\": -5.4,\n        \"max\": 141851.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          21.68339031800974,\n          21.1,\n          141851.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50822.69728158641,\n        \"min\": 2.537683737533943,\n        \"max\": 145460.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2012.7697511343324,\n          2013.0,\n          145460.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51425.81424590267,\n        \"min\": 1.0,\n        \"max\": 145460.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.399615014436959,\n          6.0,\n          145460.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51422.64914033379,\n        \"min\": 1.0,\n        \"max\": 145460.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15.71225766533755,\n          16.0,\n          145460.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#draw boxplot\n",
        "\n",
        "plt.figure(figsize=(15,10))\n",
        "\n",
        "plt.subplot(2, 2, 1)\n",
        "fig = df.boxplot(column='Rainfall')\n",
        "fig.set_title('')\n",
        "fig.set_ylabel('RainFall')\n",
        "\n",
        "\n",
        "plt.subplot(2, 2, 2)\n",
        "fig = df.boxplot(column='Evaporation')\n",
        "fig.set_title('')\n",
        "fig.set_ylabel('Evaporation')\n",
        "\n",
        "plt.subplot(2, 2, 3)\n",
        "fig = df.boxplot(column='Sunshine')\n",
        "fig.set_title('')\n",
        "fig.set_ylabel('Sunshine')\n",
        "\n",
        "\n",
        "plt.subplot(2, 2, 4)\n",
        "fig = df.boxplot(column='Humidity9am')\n",
        "fig.set_title('')\n",
        "fig.set_ylabel('Humidity9am')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 761
        },
        "id": "AHQnrEidOHp8",
        "outputId": "6d69d27c-7da9-4e5f-b578-38dd0b81db19"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Humidity9am')"
            ]
          },
          "metadata": {},
          "execution_count": 117
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (15,10))\n",
        "\n",
        "plt.subplot(2, 2, 1)\n",
        "sns.histplot(df['Rainfall'])\n",
        "fig.set_title('')\n",
        "fig.set_ylabel('Rainfall')\n",
        "\n",
        "plt.subplot(2, 2, 2)\n",
        "sns.histplot(df['Evaporation'])\n",
        "fig.set_title('')\n",
        "fig.set_ylabel('Evaporation')\n",
        "\n",
        "plt.subplot(2, 2, 3)\n",
        "sns.histplot(df['Sunshine'])\n",
        "fig.set_title('')\n",
        "fig.set_ylabel('Sunshine')\n",
        "\n",
        "plt.subplot(2, 2, 4)\n",
        "sns.histplot(df['Humidity9am'], kde = True)\n",
        "fig.set_title('')\n",
        "fig.set_ylabel('Humidity9am')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 768
        },
        "id": "XDkx1o90Os-5",
        "outputId": "c371ac85-69a8-4548-e540-f7daecc5cec1"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(658.090909090909, 0.5, 'Humidity9am')"
            ]
          },
          "metadata": {},
          "execution_count": 118
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 4 Axes>"
            ],
            "image/png": "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nSTpoj77Lperws9JeVttUtEYSNL999+v1q1bKyoqStu3b9fEiRO1d+9evfPOO5Lqxhjs2LFDTqdTHo9HjRo10vLlyxUbG6ucnJx68Rk4V/+l+vH+o/6pb/O8ilzu7726YunSpfriiy+0devWs9rqyzh8++23mj9/vlJTU/XHP/5RW7du1e9//3sFBQUpKSnpoubDdcHjjz8ut9ut9u3by9/fX2VlZXrmmWc0bNgwSRf3d0FdxN9DFfN4PJo4caLuu+8+ORwOSfVnHJ5//nkFBATo97//fYXttXUcKM6hRin/ZkiSOnfurJ49e6p169ZatmyZQkJCLMwMVho6dKj5c1xcnDp37qzrrrtO69evV9++fS3MrPIlJydr586dPvdarG/ONQan3yciLi5OkZGR6tu3r/bt26frrruuutOsEu3atVNOTo4KCgr0z3/+U0lJScrMzLQ6rWpzrv7HxsbWi/cfqI/q8++9AwcO6JFHHlF6erqCg4OtTscyXq9XPXr00LPPPitJuuGGG7Rz504tWLBASUlJFmdXfZYtW6bFixdryZIl6tixo3JycjRu3DhFRUXVq3HAhZWUlOh//ud/ZBiG5s+fb3U61So7O1tz5szRF198IZvNZnU6lYrLWmu4Fi1ayN/f/6ynMuXl5SkiIsKirKpPkyZNdP311+ubb75RRESEiouLdfToUZ+YujwW5f063/sfERFx1k2jS0tLdfjw4To7Ltdee61atGihb775RlLdGYOUlBStWLFCH3/8sVq2bGmuv5jPfkRERIWfk/K22uJcY1CRnj17SpLP56C2j0FQUJDatGmj7t27a9q0aerSpYvmzJlTbz4D5+p/Reri+4/6p77P867k915dkJ2drfz8fHXr1k0BAQEKCAhQZmam5s6dq4CAAIWHh9eLcYiMjDTPki7XoUMH89Y2FzMfrgsmTJigxx9/XEOHDlVcXJyGDx+u8ePHa9q0aZLqzzicib+HfJUX5v79738rPT3dPGtOqh/j8Mknnyg/P1+tWrUy/9/897//rUcffVTXXHONpNo7DhTnarigoCB1795dGRkZ5jqv16uMjAyf+/DUVcePH9e+ffsUGRmp7t27KzAw0Gcs9u7dq9zc3Do7FjExMYqIiPDps9vt1ubNm80+O51OHT16VNnZ2WbMunXr5PV6zT9e65r//Oc/+umnnxQZGSmp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d61cuVI7d+7U6NGjNXz4cG3ZsuW8+5kxY4Z69Oihbdu26Xe/+53Gjh2rvXv3SpIOHTqkjh076tFHH9WhQ4f0hz/8QZLUuHFjLVy4ULt379acOXP0t7/9TbNmzaraDgMAANRCw4YN0wcffGAWuyRp9erVOnnypH75y19Kkk6cOKHU1FR9/vnnysjIkJ+fn375y1/K6/X67GvChAl69NFHtW3bNjmdTt1999366aefJEnff/+97rzzTt1444368ssvNX/+fL322mv685//7LOPRYsWKSgoSJ999pkWLFggSfLz89PcuXO1a9cuLVq0SOvWrdNjjz0mSbr55ps1e/ZsORwOHTp0yGdOeDqv16uBAwfq8OHDyszMVHp6ur799tuzCpP79u3Tu+++qxUrVmjFihXKzMzUc889d4WjDKDKGQAAIykpyfD39zcaNmxo2O12Q5Lh5+dn/POf/zznNomJicajjz5qvv7Zz35mPPLII+br1q1bG7/+9a/N116v1wgLCzPmz59vruvSpYvx5JNPnje3F154wejevbv5+sknnzS6dOnik/vAgQMv3EkAAIBa6PR52unLM888Y5SUlBgtWrQw/v73v5vx9913nzFkyJBz7u+HH34wJBk7duwwDMMw9u/fb0gynnvuOTOmpKTEaNmypfH8888bhmEYf/zjH4127doZXq/XjJk3b57RqFEjo6yszDCMU3PBG2644YL9efvtt43mzZubr9944w0jNDT0rLjWrVsbs2bNMgzDMNasWWP4+/sbubm5ZvuuXbsMScaWLVsMwzg1R2zQoIHhdrvNmAkTJhg9e/a8YE4ArMU95wDg/9x+++2aP3++Tpw4oVmzZikgIECDBw+WJJWVlenZZ5/VsmXL9P3336u4uFhFRUVq0KDBeffZuXNn82ebzaaIiAjl5+efd5u33npLc+fO1b59+3T8+HGVlpbK4XBceQcBAABqqfJ52umaNWumgIAA/c///I8WL16s4cOH68SJE3rvvfe0dOlSM+7rr7/W5MmTtXnzZv3444/mGXO5ubnq1KmTGed0Os2fAwIC1KNHD3311VeSpK+++kpOp1M2m82MueWWW3T8+HH95z//UatWrSRJ3bt3Pyv3tWvXatq0adqzZ4/cbrdKS0vl8Xh08uTJC84ly3311VeKjo5WdHS0uS42NlZNmjTRV199pRtvvFHSqUthGzdubMZERkZecO4JwHpc1goA/6dhw4Zq06aNunTpotdff12bN2/Wa6+9Jkl64YUXNGfOHE2cOFEff/yxcnJylJCQoOLi4vPuMzAw0Oe1zWY76xKK02VlZWnYsGG68847tWLFCm3btk1/+tOfLngcAACAuqx8nnb6Uv4wrmHDhikjI0P5+fl69913FRIS4vMk17vvvluHDx/W3/72N23evFmbN2+WpCqZXzVs2NDn9Xfffae77rpLnTt31v/7f/9P2dnZmjdvXpUd/1LnngBqBopzAFABPz8//fGPf9SkSZNUWFiozz77TAMHDtSvf/1rdenSRddee63+9a9/VfpxN27cqNatW+tPf/qTevToobZt2+rf//53pR8HAACgrrj55psVHR2tt956S4sXL9avfvUrs0j1008/ae/evZo0aZL69u2rDh066MiRIxXuZ9OmTebPpaWlys7OVocOHSRJHTp0UFZWlgzDMGM+++wzNW7cWC1btjxnbtnZ2fJ6vZoxY4Z69eql66+/XgcPHvSJCQoKUllZ2Xn72KFDBx04cEAHDhww1+3evVtHjx5VbGzsebcFUPNRnAOAc/jVr34lf39/zZs3T23btlV6ero2btyor776Sr/97W99no5VWdq2bavc3FwtXbpU+/bt09y5c7V8+fJKPw4AAEBtUlRUJJfL5bP8+OOPZvv999+vBQsWKD09XcOGDTPXN23aVM2bN9crr7yib775RuvWrVNqamqFx5g3b56WL1+uPXv2KDk5WUeOHNGDDz4oSfrd736nAwcO6OGHH9aePXv03nvv6cknn1Rqaqr8/M79Z3WbNm1UUlKiF198Ud9++63+93//13xQRLlrrrlGx48fV0ZGhn788UedPHnyrP3Ex8crLi5Ow4YN0xdffKEtW7ZoxIgR+tnPfqYePXpc0lgCqHkozgHAOQQEBCglJUXTp0/Xo48+qm7duikhIUF9+vRRRESEBg0aVOnH/MUvfqHx48crJSVFXbt21caNG/XEE09U+nEAAABqk1WrVikyMtJnufXWW832YcOGaffu3br66qt1yy23mOv9/Py0dOlSZWdnq1OnTho/frxeeOGFCo/x3HPP6bnnnlOXLl306aef6v3331eLFi0kSVdffbU+/PBDbdmyRV26dNGYMWM0cuRITZo06bx5d+nSRTNnztTzzz+vTp06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SCUkJFjZfQCokzwej7Zu3XrW+htvvFHBwcFXvK8vv/xSa3cfUnSbjua677/do/GSbrvttsvKGbBajT5zjm9TAQAA6q67775bd955p9q2bavrr79ezzzzjBo1aqRNmzapoKBAr732mmbOnKk77rhD3bt31xtvvKGNGzdq06ZNkqQ1a9Zo9+7devPNN9W1a1cNGDBATz/9tObNm6fi4mJJ0oIFCxQTE6MZM2aoQ4cOSklJ0b333qtZs2ZZ2XUAqLO2bt2qWW+la9nWA+Yy6630Cgt2ZzrzrLhXX31VM/6xymdfy9Z9rqDGzXVtXA9zufra9tXQM6Dq1OjiXPm3qdnZ2fr88891xx13aODAgdq1a5ckafz48frggw/09ttvKzMzUwcPHtQ999xjbl/+bWpxcbE2btyoRYsWaeHChZo8ebIZU/5t6u23366cnByNGzdODz30kFavXl3t/QUAAKivysrKtHTpUp04cUJOp1PZ2dkqKSlRfHy8GdO+fXu1atVKWVlZkqSsrCzFxcUpPDzcjElISJDb7Tbni1lZWT77KI8p30dFioqK5Ha7fRYAwMW7+tr2l1U8O6uwV0Eh7qqoVlWcPVD9avRlrXfffbfP62eeeUbz58/Xpk2b1LJlS7322mtasmSJ7rjjDknSG2+8oQ4dOmjTpk3q1auX+W3q2rVrFR4erq5du+rpp5/WxIkTNWXKFAUFBfl8mypJHTp00KeffqpZs2ZxqQMAAEAV27Fjh5xOpzwejxo1aqTly5crNjZWOTk5CgoKUpMmTXziw8PD5XK5JEkul8unMFfeXt52vhi3263CwkKFhIScldO0adP01FNPVVYXAQCXoLywJ0kHv91jcTZA9ajRxbnTlZWV6e23377ob1N79ep1zm9Tx44dq127dumGG24457ep48aNO28+RUVFKioqMl/zjSoAAMCla9eunXJyclRQUKB//vOfSkpKUmZmpqU5paWlKTU11XztdrsVHR1tYUYAULuVlhTryy+/PGv95dyHzor9A1WtxhfnauK3qRLfqAIAAFSGoKAgtWnTRpLUvXt3bd26VXPmzNGQIUNUXFyso0eP+sz38vLyFBERIUmKiIjQli1bfPZXfv/h02POvCdxXl6eHA7HOed5drtddru9UvoHAJDyD3yrPUcOa29xM3PduR7iUGZI3x8p1I8ninQgqJVK1EiH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tNmxMzMzPccAALM53dL2gsbRWOf37qbDh0wOhC5nYFi9AkLCtKPUpXv+N0sfTL9YkcEBZsc6reU7SyRJ3QJcCgtqucT13SfnDMOQxWLxer7W8kpxLjU1VTabTbGxsc22l5eX6/zzz9e+ffvO6Hi+djdV4o4qgM6noKCQAhaAVmmrvt60adO0cOFCffjhh4qIiPCMaoiKilJISIiioqJ05513aubMmYqJiVFkZKR+9atfaezYsbrwwgslSRMnTtSQIUN08803a86cOSoqKtKf/vQnTZs2zdNXu/fee/XXv/5VDz74oO644w6tXLlSixcv1ieffNKGVwUAzt4he6AcLrdiwwLVJyZUh80OhC7HYpH+33khetrWoH3HajRzUbZeuzlDfn6+U8A6mcwd/6nvBJ5+BdYgwy6L4VaD20+V9gZFhfhO8dErc84dOHBALpfrhO319fU6cqT145cNw9D06dP1/vvva+XKlS3eTW1ysrupW7duVUlJiafNye6mfvcYTW24mwqgIxiSPkLRsfEtvoakjzA7JoBOpK36eq+++qoqKip02WWXKSkpyfNatGiRp83cuXP1ox/9SFOnTtWll16qxMREvffee579VqtVS5YskdVq1dixY/XLX/5St9xyi5544glPm5SUFH3yySfKzMzUiBEj9Pzzz+vvf/87C38B8AkNbkP7ahtvJpzXO9qnnuZB1xIV5Kf5N49SoL+flu8s0csrd5sdqUVVdqfW7z0mSUoIOv0CKhZJwfrPvI4+NrS1TZ+c++ijjzz/vWzZMkVFfTtO3uVyacWKFerbt2+rj8fdVAA4vdY88bZ01jXtlAZAZ9bWfT3DME7bJjg4WPPmzdO8efNO2aZPnz4nDFv9vssuu0zffPNNq7MBQHvZWNggu9tPoYFWDUzsGPN8ofMa3jNas3+Srt++m6MXl++Wpfywzk/49gmz0aNHKzg42MSE31qz+5icLkOJYX4Kt7pb9ZkQ1atOQSqrcSjlNHPUtac2Lc5de+21kiSLxaJbb7212b6AgAD17dtXzz//fKuP9+qrr0pq7Ex91+uvv67bbrtNUuPdVD8/P02dOlX19fWaNGmS/va3v3naNt1Nve+++zR27FiFhYXp1ltvPend1BkzZuill15Sz549uZsKAADwPW3d1wOArs4wDH22r16SNKJntPz9vDK4DTgjU0f11NYj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0KjcadX+4zWySBqTEqPte81OBKCjavPiXJNu3bpp9OjR3jo8AAAATERfD0BXl1fT+JTcoMQIdQsLNDkNgI7Mz+wAAAAA6JpWr16tq6++WsnJybJYLPrggw+a7b/ttttksViavSZPntysTVlZmW666SZFRkYqOjpad955p6qrq5u12bJli8aNG6fg4GD16tVLc+bM8fZXA9DJ7TneoBJHgCwW6YKUmNN/AABa4PPFOTptAACYb0j6CEXHxrf4qq6uMjsmOpiamhqNGDFC8+bNO2WbyZMnq7Cw0PN6++23m+2/6aabtH37dmVmZmrJkiVavXq17rnnHs/+yspKTZw4UX369FFWVpb+8pe/6LHHHtNrr73mte8FoPN7b1e9JGlwYqSiQ3lqDsC58dqw1rbS1Gm74447dN111520zeTJk/X666973gcFNZ+E86abblJhYaEyMzPldDp1++2365577tHChQslfdtpmzBhgubPn6+tW7fqjjvuUHR0dLPOHQAAXVVBQaEmz/6wxTaLp49vpzToLKZMmaIpU6a02CYoKEiJiYkn3bdz504tXbpUNptNGRkZkqRXXnlFP/zhD/Xcc88pOTlZb731lhwOh/75z38qMDBQQ4cOVXZ2tl544QX6eQDOiu1AmbYec8kig6fmALQJny/O0WkDAADour788kvFx8erW7duuvzyy/XnP/9ZsbGxkqT169crOjra08eTpAkTJsjPz08bN27UT37yE61fv16XXnqpAgO/fbJl0qRJevbZZ3X8+PGTLmRRX1+v+vp6z/vKykovfkMAHc3czF2SpF7BTkWFBJicBkBn4PPDWlujqdM2cOBA3XfffSotLfXsO12nranNyTpteXl5On78ePt9EQBe1ZpheUPSR5gdEwDwH5MnT9b//u//asWKFXr22We1atUqTZkyRS6XS5JUVFSk+Pj4Zp/x9/dXTEyMioqKPG0SEhKatWl639Tm+2bPnq2oqCjPq1evXm391QB0UBv3lWrd3lJZLVJamN3sOAA6CZ9/cu50Jk+erOuuu04pKSnau3ev/vCHP2jKlClav369rFZrqzttKSkpzdp8t9PGHVWgc2jNsLyls65ppzRA+6iuqVZ0bHyLbZKTk7Rja047JQJa74YbbvD8d3p6uoYPH65+/frpyy+/1BVXXOG1886aNUszZ870vK+srKRAB3Rh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AMAkFOcAAAAAAAAAk1CcAwAAAAAAAExCcQ4AAAAAAAAwCcU5AAAAAAAAwCQU5wAAAAAAAACTUJwDgHa2YMECRUdHt9jmtttu07XXXtsueQAAACAdOHBAFotF2dnZp2zz5ZdfymKxqLy8XFLr+nUAcDoU5wB0OUePHtV9992n3r17KygoSImJiZo0aZK++uors6N5vPTSS1qwYIHZMQAAANrVqW5Qfr8o5g29evVSYWGhhg0b1urP/PznP9euXbs87x977DGNHDnyjM9dVVWl+++/X3369FFISIguuugi2Wy2Mz4OgI7J3+wAANDepk6dKofDoTfeeEOpqakqLi7WihUrVFpaanY0j6ioKLMjAAAAdClWq1WJiYln9JmQkBCFhISc87nvuusubdu2Tf/617+UnJysN998UxMmTNCOHTvUo0ePcz4+AN/Gk3MAupTy8nKtWbNGzz77rMaPH68+ffroggsu0KxZs/TjH//4pMMZysvLZbFY9OWXX0r69s7tihUrlJGRodDQUF100UXKy8vzfCYnJ0fjx49XRESEIiMjNWrUKG3evLlZlmXLlmnw4MEKDw/X5MmTVVhY6Nn3/bvGl112mX7961/rwQcfVExMjBITE/XYY4+d8N3uuusuxcXFKTIyUpdffrlycnLa7NoBAAD4gpM9nfbiiy+qb9++nvdNfamnn35aCQkJio6O1hNPPKGGhgY98MADiomJUc+ePfX66697PnOyfuCnn36qAQMGKCQkROPHj9eBAweanfe7w1oXLFigxx9/XDk5ObJYLLJYLFqwYIHuuOMO/ehHP2r2OafTqfj4eP3jH/9QXV2d/v3vf2vOnDm69NJL1b9/fz322GPq37+/Xn31Vc9n/vWvfykjI0MRERFKTEzUjTfeqJKSEs/+pj7qsmXLdN555ykkJESXX365SkpK9Nlnn2nw4MGKjIzUjTfeqNra2rO7+AC8guIcgC4lPDxc4eHh+uCDD1RfX39Ox/rjH/+o559/Xps3b5a/v7/uuOMOz76bbrpJPXv2lM1mU1ZWln7/+98rICDAs7+2tlbPPfec/vWvf2n16tU6dOiQfve737V4vjfeeENhYWHauHGj5syZoyeeeEKZmZme/ddff72n85WVlaXzzz9fV1xxhcrKys7pewIAAHREK1euVEFBgVavXq0XXnhBjz76qH70ox+pW7du2rhxo+69917913/9lw4fPnzSz+fn5+u6667T1VdfrezsbN111136/e9/f8rz/fznP9dvf/tbDR06VIWFhSosLNTPf/5z3XXXXVq6dGmzG7FLlixRbW2tfv7zn6uhoUEul0vBwcHNjhcSEqK1a9d63judTj355JPKycnRBx98oAMHDui22247Icdjjz2mv/71r1q3bp3y8/P1s5/9TC+++KIWLlyoTz75RJ9//rleeeWVM7yaALyJ4hyALsXf318LFizQG2+8oejoaF188cX6wx/+oC1btpzxsZ566in94Ac/0JAhQ/T73/9e69atk91ulyQdOnRIEyZM0KBBg5SWlqbrr79eI0aM8HzW6XRq/vz5ysjI0Pnnn6/p06drxYoVLZ5v+PDhevTRR5WWlqZbbrlFGRkZns+sXbtWmzZt0rvvvquMjAylpaXpueeeU3R0tP7v//7vjL8bAACAWZYsWeK5odr0mjJlyhkfJyYmRi+//LIGDhyoO+64QwMHDlRtba3+8Ic/KC0tTbNmzVJgYGCzAth3vfrqq+rXr5+ef/55DRw4UDfddNNJi2FNQkJCFB4eLn9/fyUmJioxMdEzf9zAgQP1r3/9y9P29ddf1/XXX6/w8HBFRERo7NixevLJJ1VQUCCXy6U333xT69evb1bQu+OOOzRlyhSlpqbqwgsv1Msvv6zPPvtM1dXVzXL8+c9/1sUXX6zzzjtPd955p1atWqVXX31V5513nsaNG6ef/vSn+uKLL874egLwHopzALqcqVOnqqCgQB999JEmT56sL7/8Uueff/4ZL8AwfPhwz38nJSVJkmdowcyZM3XXXXdpwoQJeuaZZ7R3795mnw0NDVW/fv2aff67wxJOd77vfyYnJ0fV1dWKjY1t1pHdv3//CecGAADwZePHj1d2dnaz19///vczPs7QoUPl5/ftr7wJCQlKT0/3vLdarYqNjT1lH2znzp0aM2ZMs21jx4494xxS45xyTUNoi4uL9dlnnzUbdfGvf/1LhmGoR48eCgoK0ssvv6xf/OIXzfJnZWXp6quvVu/evRUREaEf/OAHkhpvCn/Xd/uMCQkJCg0NVWpqarNtp+t3AmhfFOcAdEnBwcG68sor9fDDD2vdunW67bbb9Oijj3o6QIZheNo6nc6THuO7w1QtFoskye12S2ocTrB9+3ZdddVVWrlypYYMGaL333//pJ9t+vx3z3m68zV9pul81dXVSkpKOqEjm5eXpwceeKDF4wIAAPiSsLAw9e/fv9nru4si+Pn5ndBvOll/7WR9p5b6U950yy23aN++fVq/fr3efPNNpaSkaNy4cZ79/fr106pVq1RdXa38/Hxt2rRJTqfTU1SrqanRpEmTFBkZqbfeeks2m83Tt3Q4HM3O9f0+qlnfGUDrUZwDAElDhgxRTU2N4uLiJKnZEILvTgp8JgYMGKAZM2bo888/13XXXddswuG2dv7556uoqEj+/v4ndGa7d+/utfMCAAC0t7i4OBUVFTUr0J1tf60lgwcP1qZNm5pt27BhQ4ufCQwMlMvlOmF7bGysrr32Wr3++utasGCBbr/99pN+PiwsTElJSTp+/LiWLVuma665RpKUm5ur0tJSPfPMMxo3bpwGDRrE029AJ0JxDkCXUlpaqssvv1xvvvmmtmzZov379+vdd9/VnDlzdM011ygkJEQXXnihnnnmGe3cuVOrVq3Sn/70pzM6R11dnaZPn64vv/xSBw8e1FdffSWbzabBgwd76VtJEyZM0NixY3Xttdfq888/14EDB7Ru3Tr98Y9/PGGVWAAAgI7ssssu09GjRzVnzhzt3btX8+bN02effdbm57n33nu1e/duPfDAA8rLy9PChQtPOw1K3759tX//fmVnZ+vYsWPNFiC766679MYbb2jnzp269dZbm31u2bJlWrp0qfbv36/MzEyNHz9egwYN8hTxevfurcDAQL3yyivat2+fPvroIz355JNt/p0BmIPiHIAuJTw8XGPGjNHcuXN16aWXatiwYXr44Yd19913669//ask6Z///KcaGho0atQo3X///frzn/98RuewWq0qLS3VLbfcogEDBuhnP/uZpkyZoscff9wbX0lS4/CETz/9VJdeeqluv/12DRgwQDfccIMOHjyohIQEr50XAACgvQ0ePFh/+9vfNG/ePI0YMUKbNm067ar3Z6N3797697//rQ8++EAjRozQ/Pnz9fTTT7f4malTp2ry5MkaP3684uLi9Pbbb3v2TZgwQUlJSZo0aZKSk5Obfa6iokLTpk3ToEGDdMstt+iSSy7RsmXLPENS4+LitGDBAr377rsaMmSInnnmGT333HNt/p0BmMNinG6SIwAAAAAAcE6qq6vVo0cPvf7667ruuuvMjgPAh/ibHQAAAAAAgM7K7Xbr2LFjev755xUdHa0f//jHZkcC4GMozgEAAAAA4CWHDh1SSkqKevbsqQULFsjfn1/DATTHsFYAAAAAAADAJCwIAQAAAAAAAJiE4hwAAAAAAABgEopzAAAAAAAAgEkozgEAAAAAAAAmoTgHAAAAAAAAmITiHAAAAAAAAGASinMAAAAAAACASSjOAQAAAAAAACahOAcAAAAAAACY5P8DbpmoXypif4YAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(15,10))\n",
        "\n",
        "plt.subplot(2,2,1)\n",
        "fig = df['Rainfall'].hist(bins=15)\n",
        "fig.set_title('')\n",
        "fig.set_ylabel('RainFall')\n",
        "\n",
        "plt.subplot(2,2,2)\n",
        "fig = df.Evaporation.hist(bins=15)\n",
        "fig.set_title('')\n",
        "fig.set_ylabel('Evaporation')\n",
        "\n",
        "plt.subplot(2,2,3)\n",
        "fig = df.WindSpeed9am.hist(bins=15)\n",
        "fig.set_title('')\n",
        "fig.set_ylabel('WindSpeed9am')\n",
        "\n",
        "plt.subplot(2,2,4)\n",
        "fig = df.Humidity9am.hist(bins=15)\n",
        "fig.set_title('')\n",
        "fig.set_ylabel('Humidity9am')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 746
        },
        "id": "kpdGidGsScXg",
        "outputId": "cbd42a00-2cec-4cbf-8f09-35b95e6bf361"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Humidity9am')"
            ]
          },
          "metadata": {},
          "execution_count": 119
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# find outliers for Rainfall variable\n",
        "\n",
        "IQR = df.Rainfall.quantile(0.75) - df.Rainfall.quantile(0.25)\n",
        "Lower_fence = df.Rainfall.quantile(0.25) - (IQR * 3)\n",
        "Upper_fence = df.Rainfall.quantile(0.75) + (IQR * 3)\n",
        "print('Rainfall outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_fence, upperboundary=Upper_fence))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Uz0VggE7K2Vp",
        "outputId": "734d45a6-7198-48a8-b0e7-3e99486267bc"
      },
      "execution_count": 120,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rainfall outliers are values < -2.4000000000000004 or > 3.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "IQR = df.Evaporation.quantile(0.75) - df.Evaporation.quantile(0.25)\n",
        "Lower_fence = df.Evaporation.quantile(0.25) - (IQR * 3)\n",
        "Upper_fence = df.Evaporation.quantile(0.75) + (IQR * 3)\n",
        "print('Evaporation outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_fence, upperboundary=Upper_fence))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tI_lpnrrLn-B",
        "outputId": "4edb733a-b073-4695-ddd0-c50447d47982"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Evaporation outliers are values < -11.800000000000002 or > 21.800000000000004\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "IQR = df.WindSpeed9am.quantile(0.75) - df.WindSpeed9am.quantile(0.25)\n",
        "Lower_fence = df.WindSpeed9am.quantile(0.25) - (IQR * 3)\n",
        "Upper_fence = df.WindSpeed9am.quantile(0.75) + (IQR * 3)\n",
        "print('WindSpeed9am outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_fence, upperboundary=Upper_fence))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VVIToJKMNbfI",
        "outputId": "d06dd183-046a-4e0a-ab5a-6f0c9c42d35a"
      },
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "WindSpeed9am outliers are values < -29.0 or > 55.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "IQR = df.WindSpeed3pm.quantile(0.75) - df.WindSpeed3pm.quantile(0.25)\n",
        "Lower_fence = df.WindSpeed3pm.quantile(0.25) - (IQR * 3)\n",
        "Upper_fence = df.WindSpeed3pm.quantile(0.75) + (IQR * 3)\n",
        "print('WindSpeed3pm outliers are values < {lowerboundary} or > {upperboundary}'.format(lowerboundary=Lower_fence, upperboundary=Upper_fence))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z3AaSF9BPg6l",
        "outputId": "87223b82-3511-4b81-e086-722aa2526eb8"
      },
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "WindSpeed3pm outliers are values < -20.0 or > 57.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Declare feature vector and target variable\n"
      ],
      "metadata": {
        "id": "_KH4-qV0QHtl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = df.drop(['RainTomorrow'], axis=1)\n",
        "y = df['RainTomorrow']"
      ],
      "metadata": {
        "id": "0IWST6wyRD0m"
      },
      "execution_count": 124,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)"
      ],
      "metadata": {
        "id": "eGTQvtBrRj8x"
      },
      "execution_count": 125,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SiZ1dIAnR41A",
        "outputId": "59ab1b37-b2a1-4570-b5c2-adcb0b707957"
      },
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(116368, 24)"
            ]
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "biwix1dUR8uY",
        "outputId": "66832708-6ff1-4c19-e68d-2546d83ea057"
      },
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(29092, 24)"
            ]
          },
          "metadata": {},
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Feature Engineering"
      ],
      "metadata": {
        "id": "VE52dsACSDQU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Feature Engineering is the process of transforming raw data into useful features that help us to understand our model better and increase its predictive power. I will carry out feature engineering on different types of variables.\n",
        "\n",
        "First, I will display the categorical and numerical variables again separately."
      ],
      "metadata": {
        "id": "u7pd20vQSa6T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 836
        },
        "id": "1-yrAHhKSscT",
        "outputId": "0a1acb39-bc12-40ac-e54f-366d9dddecae"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Location          object\n",
              "MinTemp          float64\n",
              "MaxTemp          float64\n",
              "Rainfall         float64\n",
              "Evaporation      float64\n",
              "Sunshine         float64\n",
              "WindGustDir       object\n",
              "WindGustSpeed    float64\n",
              "WindDir9am        object\n",
              "WindDir3pm        object\n",
              "WindSpeed9am     float64\n",
              "WindSpeed3pm     float64\n",
              "Humidity9am      float64\n",
              "Humidity3pm      float64\n",
              "Pressure9am      float64\n",
              "Pressure3pm      float64\n",
              "Cloud9am         float64\n",
              "Cloud3pm         float64\n",
              "Temp9am          float64\n",
              "Temp3pm          float64\n",
              "RainToday         object\n",
              "Year               int32\n",
              "Month              int32\n",
              "Day                int32\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Location</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MinTemp</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaxTemp</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rainfall</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Evaporation</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sunshine</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindGustDir</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindDir9am</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindDir3pm</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindSpeed9am</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindSpeed3pm</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Humidity9am</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Humidity3pm</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pressure9am</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pressure3pm</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cloud9am</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cloud3pm</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temp9am</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temp3pm</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RainToday</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <td>int32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Month</th>\n",
              "      <td>int32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Day</th>\n",
              "      <td>int32</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 128
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# display categorical variables\n",
        "\n",
        "categorical = [col for col in x_train.columns if x_train[col].dtypes == 'O']\n",
        "\n",
        "categorical"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LPh7QORhS6yQ",
        "outputId": "c5e0f437-de16-4881-eaf1-1c7f4eafc87d"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm', 'RainToday']"
            ]
          },
          "metadata": {},
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numeric = [col for col in x_train.columns if x_train[col].dtypes != 'O']\n",
        "\n",
        "numeric"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "12jzTAKBTGbL",
        "outputId": "5b8fda39-3372-4cf9-9e5e-48e691b09c96"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['MinTemp',\n",
              " 'MaxTemp',\n",
              " 'Rainfall',\n",
              " 'Evaporation',\n",
              " 'Sunshine',\n",
              " 'WindGustSpeed',\n",
              " 'WindSpeed9am',\n",
              " 'WindSpeed3pm',\n",
              " 'Humidity9am',\n",
              " 'Humidity3pm',\n",
              " 'Pressure9am',\n",
              " 'Pressure3pm',\n",
              " 'Cloud9am',\n",
              " 'Cloud3pm',\n",
              " 'Temp9am',\n",
              " 'Temp3pm',\n",
              " 'Year',\n",
              " 'Month',\n",
              " 'Day']"
            ]
          },
          "metadata": {},
          "execution_count": 130
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train[numeric].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 680
        },
        "id": "5Bzf0E60TcVI",
        "outputId": "f92e2f06-f6e4-4c94-ed25-6db4d9b3bd9c"
      },
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MinTemp           1183\n",
              "MaxTemp           1019\n",
              "Rainfall          2617\n",
              "Evaporation      50355\n",
              "Sunshine         55899\n",
              "WindGustSpeed     8218\n",
              "WindSpeed9am      1409\n",
              "WindSpeed3pm      2456\n",
              "Humidity9am       2147\n",
              "Humidity3pm       3598\n",
              "Pressure9am      12091\n",
              "Pressure3pm      12064\n",
              "Cloud9am         44796\n",
              "Cloud3pm         47557\n",
              "Temp9am           1415\n",
              "Temp3pm           2865\n",
              "Year                 0\n",
              "Month                0\n",
              "Day                  0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>MinTemp</th>\n",
              "      <td>1183</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaxTemp</th>\n",
              "      <td>1019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rainfall</th>\n",
              "      <td>2617</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Evaporation</th>\n",
              "      <td>50355</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sunshine</th>\n",
              "      <td>55899</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <td>8218</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindSpeed9am</th>\n",
              "      <td>1409</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindSpeed3pm</th>\n",
              "      <td>2456</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Humidity9am</th>\n",
              "      <td>2147</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Humidity3pm</th>\n",
              "      <td>3598</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pressure9am</th>\n",
              "      <td>12091</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pressure3pm</th>\n",
              "      <td>12064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cloud9am</th>\n",
              "      <td>44796</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cloud3pm</th>\n",
              "      <td>47557</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temp9am</th>\n",
              "      <td>1415</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temp3pm</th>\n",
              "      <td>2865</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Month</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Day</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# print percentage of missing values in the numerical variables in training set\n",
        "\n",
        "for col in numeric:\n",
        "    if x_train[col].isnull().mean()>0:\n",
        "        print(col, round(x_train[col].isnull().mean(),4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e7JHTh6RUENS",
        "outputId": "58edeed9-7921-43bf-e68b-c92a9a4811fb"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MinTemp 0.0102\n",
            "MaxTemp 0.0088\n",
            "Rainfall 0.0225\n",
            "Evaporation 0.4327\n",
            "Sunshine 0.4804\n",
            "WindGustSpeed 0.0706\n",
            "WindSpeed9am 0.0121\n",
            "WindSpeed3pm 0.0211\n",
            "Humidity9am 0.0185\n",
            "Humidity3pm 0.0309\n",
            "Pressure9am 0.1039\n",
            "Pressure3pm 0.1037\n",
            "Cloud9am 0.385\n",
            "Cloud3pm 0.4087\n",
            "Temp9am 0.0122\n",
            "Temp3pm 0.0246\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# impute missing values in X_train and X_test with respective column median in X_train\n",
        "\n",
        "for df1 in [x_train, x_test]:\n",
        "    for col in numeric:\n",
        "        col_median=x_train[col].median()\n",
        "        df1[col].fillna(col_median, inplace=True)\n",
        "\n",
        "df1.isnull().sum()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 836
        },
        "id": "puLMthnrVDDU",
        "outputId": "b3842e4a-f03d-4caa-8180-dec3f6659013"
      },
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Location            0\n",
              "MinTemp             0\n",
              "MaxTemp             0\n",
              "Rainfall            0\n",
              "Evaporation         0\n",
              "Sunshine            0\n",
              "WindGustDir      2056\n",
              "WindGustSpeed       0\n",
              "WindDir9am       2118\n",
              "WindDir3pm        859\n",
              "WindSpeed9am        0\n",
              "WindSpeed3pm        0\n",
              "Humidity9am         0\n",
              "Humidity3pm         0\n",
              "Pressure9am         0\n",
              "Pressure3pm         0\n",
              "Cloud9am            0\n",
              "Cloud3pm            0\n",
              "Temp9am             0\n",
              "Temp3pm             0\n",
              "RainToday         644\n",
              "Year                0\n",
              "Month               0\n",
              "Day                 0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Location</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MinTemp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaxTemp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rainfall</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Evaporation</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sunshine</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindGustDir</th>\n",
              "      <td>2056</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindDir9am</th>\n",
              "      <td>2118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindDir3pm</th>\n",
              "      <td>859</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindSpeed9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindSpeed3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Humidity9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Humidity3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pressure9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pressure3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cloud9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cloud3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temp9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temp3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RainToday</th>\n",
              "      <td>644</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Month</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Day</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 133
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train[numeric].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 680
        },
        "id": "UjF87OleVnvB",
        "outputId": "3aa9bdf3-77fb-4362-94bf-77d5c6548d05"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MinTemp          0\n",
              "MaxTemp          0\n",
              "Rainfall         0\n",
              "Evaporation      0\n",
              "Sunshine         0\n",
              "WindGustSpeed    0\n",
              "WindSpeed9am     0\n",
              "WindSpeed3pm     0\n",
              "Humidity9am      0\n",
              "Humidity3pm      0\n",
              "Pressure9am      0\n",
              "Pressure3pm      0\n",
              "Cloud9am         0\n",
              "Cloud3pm         0\n",
              "Temp9am          0\n",
              "Temp3pm          0\n",
              "Year             0\n",
              "Month            0\n",
              "Day              0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>MinTemp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaxTemp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rainfall</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Evaporation</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sunshine</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindSpeed9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindSpeed3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Humidity9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Humidity3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pressure9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pressure3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cloud9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cloud3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temp9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temp3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Month</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Day</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Engineering missing values in categorical variables\n"
      ],
      "metadata": {
        "id": "o6x5HGz8V2ks"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_train[categorical].isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "1XGNC3TSWIoE",
        "outputId": "c5a75d66-bbfd-4e9d-f2bf-7b43a2bda11a"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Location          0\n",
              "WindGustDir    8270\n",
              "WindDir9am     8448\n",
              "WindDir3pm     3369\n",
              "RainToday      2617\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Location</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindGustDir</th>\n",
              "      <td>8270</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindDir9am</th>\n",
              "      <td>8448</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindDir3pm</th>\n",
              "      <td>3369</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RainToday</th>\n",
              "      <td>2617</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# print categorical variables with missing data\n",
        "\n",
        "for col in categorical:\n",
        "    if x_train[col].isnull().mean()>0:\n",
        "        print(col, (x_train[col].isnull().mean()))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z2dxQrK-WL-_",
        "outputId": "2c21e559-77f1-424d-cf0f-da02ba57be02"
      },
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "WindGustDir 0.07106764746322013\n",
            "WindDir9am 0.07259727760208992\n",
            "WindDir3pm 0.028951258077822083\n",
            "RainToday 0.02248900041248453\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# impute missing categorical variables with most frequent value\n",
        "\n",
        "for df2 in [x_train, x_test]:\n",
        "    df2['WindGustDir'].fillna(x_train['WindGustDir'].mode()[0], inplace=True)\n",
        "    df2['WindDir9am'].fillna(x_train['WindDir9am'].mode()[0], inplace=True)\n",
        "    df2['WindDir3pm'].fillna(x_train['WindDir3pm'].mode()[0], inplace=True)\n",
        "    df2['RainToday'].fillna(x_train['RainToday'].mode()[0], inplace=True)\n",
        "\n",
        "x_train.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 836
        },
        "id": "nt0bBHQAejU6",
        "outputId": "e01ac57c-dbd6-4c0e-963d-a5564c1acecf"
      },
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Location         0\n",
              "MinTemp          0\n",
              "MaxTemp          0\n",
              "Rainfall         0\n",
              "Evaporation      0\n",
              "Sunshine         0\n",
              "WindGustDir      0\n",
              "WindGustSpeed    0\n",
              "WindDir9am       0\n",
              "WindDir3pm       0\n",
              "WindSpeed9am     0\n",
              "WindSpeed3pm     0\n",
              "Humidity9am      0\n",
              "Humidity3pm      0\n",
              "Pressure9am      0\n",
              "Pressure3pm      0\n",
              "Cloud9am         0\n",
              "Cloud3pm         0\n",
              "Temp9am          0\n",
              "Temp3pm          0\n",
              "RainToday        0\n",
              "Year             0\n",
              "Month            0\n",
              "Day              0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Location</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MinTemp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaxTemp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rainfall</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Evaporation</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sunshine</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindGustDir</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindDir9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindDir3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindSpeed9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindSpeed3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Humidity9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Humidity3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pressure9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pressure3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cloud9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cloud3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temp9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temp3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RainToday</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Month</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Day</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 137
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test.isnull().sum()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 836
        },
        "id": "pK2PPhtrhVV-",
        "outputId": "a6a86c84-0e73-441b-a265-c5a2239bfc5d"
      },
      "execution_count": 138,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Location         0\n",
              "MinTemp          0\n",
              "MaxTemp          0\n",
              "Rainfall         0\n",
              "Evaporation      0\n",
              "Sunshine         0\n",
              "WindGustDir      0\n",
              "WindGustSpeed    0\n",
              "WindDir9am       0\n",
              "WindDir3pm       0\n",
              "WindSpeed9am     0\n",
              "WindSpeed3pm     0\n",
              "Humidity9am      0\n",
              "Humidity3pm      0\n",
              "Pressure9am      0\n",
              "Pressure3pm      0\n",
              "Cloud9am         0\n",
              "Cloud3pm         0\n",
              "Temp9am          0\n",
              "Temp3pm          0\n",
              "RainToday        0\n",
              "Year             0\n",
              "Month            0\n",
              "Day              0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Location</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MinTemp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MaxTemp</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rainfall</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Evaporation</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sunshine</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindGustDir</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindDir9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindDir3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindSpeed9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WindSpeed3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Humidity9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Humidity3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pressure9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pressure3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cloud9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cloud3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temp9am</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Temp3pm</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RainToday</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Month</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Day</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 138
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Engineering outliers in numerical variables"
      ],
      "metadata": {
        "id": "bBYaC4DKhimJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def max_value(df3, variable, top):\n",
        "    return np.where(df3[variable]>top, top, df3[variable])\n",
        "\n",
        "for df3 in [x_train, x_test]:\n",
        "    df3['Rainfall'] = max_value(df3, 'Rainfall', 3.2)\n",
        "    df3['Evaporation'] = max_value(df3, 'Evaporation', 21.8)\n",
        "    df3['WindSpeed9am'] = max_value(df3, 'WindSpeed9am', 55)\n",
        "    df3['WindSpeed3pm'] = max_value(df3, 'WindSpeed3pm', 57)"
      ],
      "metadata": {
        "id": "ZDh_tM5chrJv"
      },
      "execution_count": 139,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.Rainfall.max(), x_test.Rainfall.max()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WQNAcz8rjYC3",
        "outputId": "ebbf8e9d-19f8-482b-8ec8-0dd5923e18f1"
      },
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3.2, 3.2)"
            ]
          },
          "metadata": {},
          "execution_count": 140
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.Evaporation.max(), x_test.Evaporation.max()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GdSswxlbjrY0",
        "outputId": "51427282-0367-4a26-83a8-cf3607b9a510"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(21.8, 21.8)"
            ]
          },
          "metadata": {},
          "execution_count": 141
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.WindSpeed9am.max(), x_test.WindSpeed9am.max()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vzw4qt26jtjw",
        "outputId": "3e1ab0e1-8f98-43fb-933f-393d33e4c635"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(55.0, 55.0)"
            ]
          },
          "metadata": {},
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.WindSpeed3pm.max(), x_test.WindSpeed3pm.max()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-wC-FGEmj2JG",
        "outputId": "b5e1991b-350a-47b5-a9e6-bec03db1a2a8"
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(57.0, 57.0)"
            ]
          },
          "metadata": {},
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train[categorical].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "3Q-SUJHVj9FK",
        "outputId": "a7cccf79-5e78-4f55-8862-bd0b7f54ed7e"
      },
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Location WindGustDir WindDir9am WindDir3pm RainToday\n",
              "22926   NorfolkIsland         ESE        ESE        ESE        No\n",
              "80735        Watsonia          NE        NNW        NNE        No\n",
              "121764          Perth          SW          N         SW       Yes\n",
              "139821         Darwin         ESE        ESE          E        No\n",
              "1867           Albury           E        ESE          E       Yes"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a3bbbe12-8646-4b66-b53b-7c30680bf370\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>WindGustDir</th>\n",
              "      <th>WindDir9am</th>\n",
              "      <th>WindDir3pm</th>\n",
              "      <th>RainToday</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>22926</th>\n",
              "      <td>NorfolkIsland</td>\n",
              "      <td>ESE</td>\n",
              "      <td>ESE</td>\n",
              "      <td>ESE</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80735</th>\n",
              "      <td>Watsonia</td>\n",
              "      <td>NE</td>\n",
              "      <td>NNW</td>\n",
              "      <td>NNE</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>121764</th>\n",
              "      <td>Perth</td>\n",
              "      <td>SW</td>\n",
              "      <td>N</td>\n",
              "      <td>SW</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139821</th>\n",
              "      <td>Darwin</td>\n",
              "      <td>ESE</td>\n",
              "      <td>ESE</td>\n",
              "      <td>E</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1867</th>\n",
              "      <td>Albury</td>\n",
              "      <td>E</td>\n",
              "      <td>ESE</td>\n",
              "      <td>E</td>\n",
              "      <td>Yes</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3bbbe12-8646-4b66-b53b-7c30680bf370')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a3bbbe12-8646-4b66-b53b-7c30680bf370 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a3bbbe12-8646-4b66-b53b-7c30680bf370');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1f839959-397a-49fd-8409-96353d52a362\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f839959-397a-49fd-8409-96353d52a362')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1f839959-397a-49fd-8409-96353d52a362 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"x_train[categorical]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Watsonia\",\n          \"Albury\",\n          \"Perth\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WindGustDir\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"NE\",\n          \"E\",\n          \"ESE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WindDir9am\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"ESE\",\n          \"NNW\",\n          \"N\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WindDir3pm\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"NNE\",\n          \"E\",\n          \"ESE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RainToday\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install category_encoders\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9Cpx9heBOVWQ",
        "outputId": "1ebf53bc-5513-43a7-bec5-ad73d2bc845b"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting category_encoders\n",
            "  Downloading category_encoders-2.6.4-py2.py3-none-any.whl.metadata (8.0 kB)\n",
            "Requirement already satisfied: numpy>=1.14.0 in /usr/local/lib/python3.10/dist-packages (from category_encoders) (1.26.4)\n",
            "Requirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.10/dist-packages (from category_encoders) (1.5.2)\n",
            "Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from category_encoders) (1.13.1)\n",
            "Requirement already satisfied: statsmodels>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from category_encoders) (0.14.3)\n",
            "Requirement already satisfied: pandas>=1.0.5 in /usr/local/lib/python3.10/dist-packages (from category_encoders) (2.2.2)\n",
            "Requirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.10/dist-packages (from category_encoders) (0.5.6)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.0.5->category_encoders) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.0.5->category_encoders) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.0.5->category_encoders) (2024.2)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy>=0.5.1->category_encoders) (1.16.0)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.20.0->category_encoders) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.20.0->category_encoders) (3.5.0)\n",
            "Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.9.0->category_encoders) (24.1)\n",
            "Downloading category_encoders-2.6.4-py2.py3-none-any.whl (82 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m82.0/82.0 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: category_encoders\n",
            "Successfully installed category_encoders-2.6.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# encode RainToday variable\n",
        "\n",
        "import category_encoders as ce\n",
        "\n",
        "encoder = ce.BinaryEncoder(cols=['RainToday'])\n",
        "\n",
        "x_train = encoder.fit_transform(x_train)\n",
        "\n",
        "x_test = encoder.transform(x_test)"
      ],
      "metadata": {
        "id": "-HMp71v_kYA1"
      },
      "execution_count": 145,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.head()"
      ],
      "metadata": {
        "id": "sE-Dha6Hkkqy",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "outputId": "118d70e3-5aee-40a1-a09e-6fc24796098a"
      },
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Location  MinTemp  MaxTemp  Rainfall  Evaporation  Sunshine  \\\n",
              "22926   NorfolkIsland     18.8     23.7       0.2          5.0       7.3   \n",
              "80735        Watsonia      9.3     24.0       0.2          1.6      10.9   \n",
              "121764          Perth     10.9     22.2       1.4          1.2       9.6   \n",
              "139821         Darwin     19.3     29.9       0.0          9.2      11.0   \n",
              "1867           Albury     15.7     17.6       3.2          4.7       8.4   \n",
              "\n",
              "       WindGustDir  WindGustSpeed WindDir9am WindDir3pm  ...  Pressure3pm  \\\n",
              "22926          ESE           52.0        ESE        ESE  ...       1013.9   \n",
              "80735           NE           48.0        NNW        NNE  ...       1014.6   \n",
              "121764          SW           26.0          N         SW  ...       1014.9   \n",
              "139821         ESE           43.0        ESE          E  ...       1012.1   \n",
              "1867             E           20.0        ESE          E  ...       1010.5   \n",
              "\n",
              "        Cloud9am  Cloud3pm  Temp9am  Temp3pm  RainToday_0  RainToday_1  Year  \\\n",
              "22926        5.0       7.0     21.4     22.2            0            1  2014   \n",
              "80735        3.0       5.0     14.3     23.2            0            1  2016   \n",
              "121764       1.0       2.0     16.6     21.5            1            0  2011   \n",
              "139821       1.0       1.0     23.2     29.1            0            1  2010   \n",
              "1867         8.0       8.0     16.5     17.3            1            0  2014   \n",
              "\n",
              "        Month  Day  \n",
              "22926       3   12  \n",
              "80735      10    6  \n",
              "121764      8   31  \n",
              "139821      6   11  \n",
              "1867        4   10  \n",
              "\n",
              "[5 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cc5e838e-c959-49df-b2be-5ac4276ebd8f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>MinTemp</th>\n",
              "      <th>MaxTemp</th>\n",
              "      <th>Rainfall</th>\n",
              "      <th>Evaporation</th>\n",
              "      <th>Sunshine</th>\n",
              "      <th>WindGustDir</th>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <th>WindDir9am</th>\n",
              "      <th>WindDir3pm</th>\n",
              "      <th>...</th>\n",
              "      <th>Pressure3pm</th>\n",
              "      <th>Cloud9am</th>\n",
              "      <th>Cloud3pm</th>\n",
              "      <th>Temp9am</th>\n",
              "      <th>Temp3pm</th>\n",
              "      <th>RainToday_0</th>\n",
              "      <th>RainToday_1</th>\n",
              "      <th>Year</th>\n",
              "      <th>Month</th>\n",
              "      <th>Day</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>22926</th>\n",
              "      <td>NorfolkIsland</td>\n",
              "      <td>18.8</td>\n",
              "      <td>23.7</td>\n",
              "      <td>0.2</td>\n",
              "      <td>5.0</td>\n",
              "      <td>7.3</td>\n",
              "      <td>ESE</td>\n",
              "      <td>52.0</td>\n",
              "      <td>ESE</td>\n",
              "      <td>ESE</td>\n",
              "      <td>...</td>\n",
              "      <td>1013.9</td>\n",
              "      <td>5.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>21.4</td>\n",
              "      <td>22.2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2014</td>\n",
              "      <td>3</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80735</th>\n",
              "      <td>Watsonia</td>\n",
              "      <td>9.3</td>\n",
              "      <td>24.0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>1.6</td>\n",
              "      <td>10.9</td>\n",
              "      <td>NE</td>\n",
              "      <td>48.0</td>\n",
              "      <td>NNW</td>\n",
              "      <td>NNE</td>\n",
              "      <td>...</td>\n",
              "      <td>1014.6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>14.3</td>\n",
              "      <td>23.2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2016</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>121764</th>\n",
              "      <td>Perth</td>\n",
              "      <td>10.9</td>\n",
              "      <td>22.2</td>\n",
              "      <td>1.4</td>\n",
              "      <td>1.2</td>\n",
              "      <td>9.6</td>\n",
              "      <td>SW</td>\n",
              "      <td>26.0</td>\n",
              "      <td>N</td>\n",
              "      <td>SW</td>\n",
              "      <td>...</td>\n",
              "      <td>1014.9</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>16.6</td>\n",
              "      <td>21.5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2011</td>\n",
              "      <td>8</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139821</th>\n",
              "      <td>Darwin</td>\n",
              "      <td>19.3</td>\n",
              "      <td>29.9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.2</td>\n",
              "      <td>11.0</td>\n",
              "      <td>ESE</td>\n",
              "      <td>43.0</td>\n",
              "      <td>ESE</td>\n",
              "      <td>E</td>\n",
              "      <td>...</td>\n",
              "      <td>1012.1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>23.2</td>\n",
              "      <td>29.1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2010</td>\n",
              "      <td>6</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1867</th>\n",
              "      <td>Albury</td>\n",
              "      <td>15.7</td>\n",
              "      <td>17.6</td>\n",
              "      <td>3.2</td>\n",
              "      <td>4.7</td>\n",
              "      <td>8.4</td>\n",
              "      <td>E</td>\n",
              "      <td>20.0</td>\n",
              "      <td>ESE</td>\n",
              "      <td>E</td>\n",
              "      <td>...</td>\n",
              "      <td>1010.5</td>\n",
              "      <td>8.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>16.5</td>\n",
              "      <td>17.3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2014</td>\n",
              "      <td>4</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cc5e838e-c959-49df-b2be-5ac4276ebd8f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cc5e838e-c959-49df-b2be-5ac4276ebd8f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cc5e838e-c959-49df-b2be-5ac4276ebd8f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a2138727-5d36-4a8a-bb63-503739e025ad\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a2138727-5d36-4a8a-bb63-503739e025ad')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a2138727-5d36-4a8a-bb63-503739e025ad button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "x_train"
            }
          },
          "metadata": {},
          "execution_count": 146
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test.head()"
      ],
      "metadata": {
        "id": "t1f-OwWUk84r",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "outputId": "663d5fbe-77a8-4883-b63e-74b430d4b461"
      },
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Location  MinTemp  MaxTemp  Rainfall  Evaporation  Sunshine  \\\n",
              "138175  AliceSprings     21.9     39.4       1.6         11.2      11.5   \n",
              "38638     WaggaWagga     20.5     37.5       0.0          9.2       8.4   \n",
              "124058    SalmonGums      5.1     17.2       0.2          4.7       8.4   \n",
              "99214       Adelaide     11.9     16.8       1.0          4.7       8.4   \n",
              "25097        Penrith      7.5     21.3       0.0          4.7       8.4   \n",
              "\n",
              "       WindGustDir  WindGustSpeed WindDir9am WindDir3pm  ...  Pressure3pm  \\\n",
              "138175         NNW           57.0         NE          N  ...       1004.1   \n",
              "38638          WNW           59.0        ENE          N  ...       1006.5   \n",
              "124058           W           50.0        WNW          W  ...       1015.2   \n",
              "99214           SW           28.0        WNW         SW  ...       1017.7   \n",
              "25097           NE           15.0         SW        NNE  ...       1015.2   \n",
              "\n",
              "        Cloud9am  Cloud3pm  Temp9am  Temp3pm  RainToday_0  RainToday_1  Year  \\\n",
              "138175       2.0       6.0     29.8     35.4            1            0  2014   \n",
              "38638        4.0       7.0     27.3     35.7            0            1  2015   \n",
              "124058       5.0       5.0     10.1     16.1            0            1  2009   \n",
              "99214        5.0       5.0     14.3     15.2            0            1  2016   \n",
              "25097        5.0       5.0     13.7     21.1            0            1  2011   \n",
              "\n",
              "        Month  Day  \n",
              "138175     12    3  \n",
              "38638       1    8  \n",
              "124058      8   16  \n",
              "99214       8   31  \n",
              "25097       8   28  \n",
              "\n",
              "[5 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b6d154ce-43b4-45bc-ade3-c32247315252\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>MinTemp</th>\n",
              "      <th>MaxTemp</th>\n",
              "      <th>Rainfall</th>\n",
              "      <th>Evaporation</th>\n",
              "      <th>Sunshine</th>\n",
              "      <th>WindGustDir</th>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <th>WindDir9am</th>\n",
              "      <th>WindDir3pm</th>\n",
              "      <th>...</th>\n",
              "      <th>Pressure3pm</th>\n",
              "      <th>Cloud9am</th>\n",
              "      <th>Cloud3pm</th>\n",
              "      <th>Temp9am</th>\n",
              "      <th>Temp3pm</th>\n",
              "      <th>RainToday_0</th>\n",
              "      <th>RainToday_1</th>\n",
              "      <th>Year</th>\n",
              "      <th>Month</th>\n",
              "      <th>Day</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>138175</th>\n",
              "      <td>AliceSprings</td>\n",
              "      <td>21.9</td>\n",
              "      <td>39.4</td>\n",
              "      <td>1.6</td>\n",
              "      <td>11.2</td>\n",
              "      <td>11.5</td>\n",
              "      <td>NNW</td>\n",
              "      <td>57.0</td>\n",
              "      <td>NE</td>\n",
              "      <td>N</td>\n",
              "      <td>...</td>\n",
              "      <td>1004.1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>29.8</td>\n",
              "      <td>35.4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2014</td>\n",
              "      <td>12</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38638</th>\n",
              "      <td>WaggaWagga</td>\n",
              "      <td>20.5</td>\n",
              "      <td>37.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.2</td>\n",
              "      <td>8.4</td>\n",
              "      <td>WNW</td>\n",
              "      <td>59.0</td>\n",
              "      <td>ENE</td>\n",
              "      <td>N</td>\n",
              "      <td>...</td>\n",
              "      <td>1006.5</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>27.3</td>\n",
              "      <td>35.7</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>124058</th>\n",
              "      <td>SalmonGums</td>\n",
              "      <td>5.1</td>\n",
              "      <td>17.2</td>\n",
              "      <td>0.2</td>\n",
              "      <td>4.7</td>\n",
              "      <td>8.4</td>\n",
              "      <td>W</td>\n",
              "      <td>50.0</td>\n",
              "      <td>WNW</td>\n",
              "      <td>W</td>\n",
              "      <td>...</td>\n",
              "      <td>1015.2</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>10.1</td>\n",
              "      <td>16.1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2009</td>\n",
              "      <td>8</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99214</th>\n",
              "      <td>Adelaide</td>\n",
              "      <td>11.9</td>\n",
              "      <td>16.8</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.7</td>\n",
              "      <td>8.4</td>\n",
              "      <td>SW</td>\n",
              "      <td>28.0</td>\n",
              "      <td>WNW</td>\n",
              "      <td>SW</td>\n",
              "      <td>...</td>\n",
              "      <td>1017.7</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>14.3</td>\n",
              "      <td>15.2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2016</td>\n",
              "      <td>8</td>\n",
              "      <td>31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25097</th>\n",
              "      <td>Penrith</td>\n",
              "      <td>7.5</td>\n",
              "      <td>21.3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.7</td>\n",
              "      <td>8.4</td>\n",
              "      <td>NE</td>\n",
              "      <td>15.0</td>\n",
              "      <td>SW</td>\n",
              "      <td>NNE</td>\n",
              "      <td>...</td>\n",
              "      <td>1015.2</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>13.7</td>\n",
              "      <td>21.1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2011</td>\n",
              "      <td>8</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b6d154ce-43b4-45bc-ade3-c32247315252')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b6d154ce-43b4-45bc-ade3-c32247315252 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b6d154ce-43b4-45bc-ade3-c32247315252');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-26727874-d214-465e-bed9-b14a87f32ef3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-26727874-d214-465e-bed9-b14a87f32ef3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-26727874-d214-465e-bed9-b14a87f32ef3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "x_test"
            }
          },
          "metadata": {},
          "execution_count": 147
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train = pd.concat([x_train[numeric], x_train[['RainToday_0', 'RainToday_1']],\n",
        "                     pd.get_dummies(x_train.Location),\n",
        "                     pd.get_dummies(x_train.WindGustDir),\n",
        "                     pd.get_dummies(x_train.WindDir9am),\n",
        "                     pd.get_dummies(x_train.WindDir3pm)], axis=1)\n"
      ],
      "metadata": {
        "id": "0JlYBbkclaC-"
      },
      "execution_count": 148,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.head()"
      ],
      "metadata": {
        "id": "W03i6x13mvhu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "outputId": "ff979f03-f1b1-4584-a0b4-2ae952df678c"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        MinTemp  MaxTemp  Rainfall  Evaporation  Sunshine  WindGustSpeed  \\\n",
              "22926      18.8     23.7       0.2          5.0       7.3           52.0   \n",
              "80735       9.3     24.0       0.2          1.6      10.9           48.0   \n",
              "121764     10.9     22.2       1.4          1.2       9.6           26.0   \n",
              "139821     19.3     29.9       0.0          9.2      11.0           43.0   \n",
              "1867       15.7     17.6       3.2          4.7       8.4           20.0   \n",
              "\n",
              "        WindSpeed9am  WindSpeed3pm  Humidity9am  Humidity3pm  ...    NNW  \\\n",
              "22926           31.0          28.0         74.0         73.0  ...  False   \n",
              "80735           13.0          24.0         74.0         55.0  ...  False   \n",
              "121764           0.0          11.0         85.0         47.0  ...  False   \n",
              "139821          26.0          17.0         44.0         37.0  ...  False   \n",
              "1867            11.0          13.0        100.0        100.0  ...  False   \n",
              "\n",
              "           NW      S     SE    SSE    SSW     SW      W    WNW    WSW  \n",
              "22926   False  False  False  False  False  False  False  False  False  \n",
              "80735   False  False  False  False  False  False  False  False  False  \n",
              "121764  False  False  False  False  False   True  False  False  False  \n",
              "139821  False  False  False  False  False  False  False  False  False  \n",
              "1867    False  False  False  False  False  False  False  False  False  \n",
              "\n",
              "[5 rows x 118 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-06764bf6-aa8e-4c7d-bfe7-599f0a899622\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MinTemp</th>\n",
              "      <th>MaxTemp</th>\n",
              "      <th>Rainfall</th>\n",
              "      <th>Evaporation</th>\n",
              "      <th>Sunshine</th>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <th>WindSpeed9am</th>\n",
              "      <th>WindSpeed3pm</th>\n",
              "      <th>Humidity9am</th>\n",
              "      <th>Humidity3pm</th>\n",
              "      <th>...</th>\n",
              "      <th>NNW</th>\n",
              "      <th>NW</th>\n",
              "      <th>S</th>\n",
              "      <th>SE</th>\n",
              "      <th>SSE</th>\n",
              "      <th>SSW</th>\n",
              "      <th>SW</th>\n",
              "      <th>W</th>\n",
              "      <th>WNW</th>\n",
              "      <th>WSW</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>22926</th>\n",
              "      <td>18.8</td>\n",
              "      <td>23.7</td>\n",
              "      <td>0.2</td>\n",
              "      <td>5.0</td>\n",
              "      <td>7.3</td>\n",
              "      <td>52.0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>28.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>73.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80735</th>\n",
              "      <td>9.3</td>\n",
              "      <td>24.0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>1.6</td>\n",
              "      <td>10.9</td>\n",
              "      <td>48.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>121764</th>\n",
              "      <td>10.9</td>\n",
              "      <td>22.2</td>\n",
              "      <td>1.4</td>\n",
              "      <td>1.2</td>\n",
              "      <td>9.6</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139821</th>\n",
              "      <td>19.3</td>\n",
              "      <td>29.9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.2</td>\n",
              "      <td>11.0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>37.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1867</th>\n",
              "      <td>15.7</td>\n",
              "      <td>17.6</td>\n",
              "      <td>3.2</td>\n",
              "      <td>4.7</td>\n",
              "      <td>8.4</td>\n",
              "      <td>20.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 118 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-06764bf6-aa8e-4c7d-bfe7-599f0a899622')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-06764bf6-aa8e-4c7d-bfe7-599f0a899622 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-06764bf6-aa8e-4c7d-bfe7-599f0a899622');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1a8ca5a4-c9c1-42b7-9c6c-3af4886ee67e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a8ca5a4-c9c1-42b7-9c6c-3af4886ee67e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1a8ca5a4-c9c1-42b7-9c6c-3af4886ee67e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "x_train"
            }
          },
          "metadata": {},
          "execution_count": 149
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test = pd.concat([x_test[numeric], x_test[['RainToday_0', 'RainToday_1']],\n",
        "                     pd.get_dummies(x_test.Location),\n",
        "                     pd.get_dummies(x_test.WindGustDir),\n",
        "                     pd.get_dummies(x_test.WindDir9am),\n",
        "                     pd.get_dummies(x_test.WindDir3pm)], axis=1)\n"
      ],
      "metadata": {
        "id": "tZ4UhonJnXTR"
      },
      "execution_count": 150,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Feature Scalling"
      ],
      "metadata": {
        "id": "Jdzu2CyynzYv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cols = x_train.columns"
      ],
      "metadata": {
        "id": "swQCHVI7o3r5"
      },
      "execution_count": 151,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "scaler = MinMaxScaler()\n",
        "\n",
        "x_train = scaler.fit_transform(x_train)\n",
        "\n",
        "x_test = scaler.transform(x_test)"
      ],
      "metadata": {
        "id": "fxQo-topoQyg"
      },
      "execution_count": 152,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train = pd.DataFrame(x_train, columns=[cols])"
      ],
      "metadata": {
        "id": "_LnuQym5oiFk"
      },
      "execution_count": 153,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.head()"
      ],
      "metadata": {
        "id": "pBh8IUGopJ1W",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "outputId": "3f68c65f-6a86-45d8-83f2-950f065ea19c"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    MinTemp   MaxTemp Rainfall Evaporation  Sunshine WindGustSpeed  \\\n",
              "0  0.675743  0.538752   0.0625    0.229358  0.503448      0.356589   \n",
              "1  0.440594  0.544423   0.0625    0.073394  0.751724      0.325581   \n",
              "2  0.480198  0.510397   0.4375    0.055046  0.662069      0.155039   \n",
              "3  0.688119  0.655955   0.0000    0.422018  0.758621      0.286822   \n",
              "4  0.599010  0.423440   1.0000    0.215596  0.579310      0.108527   \n",
              "\n",
              "  WindSpeed9am WindSpeed3pm Humidity9am Humidity3pm  ...  NNW   NW    S   SE  \\\n",
              "0     0.563636     0.491228        0.74        0.73  ...  0.0  0.0  0.0  0.0   \n",
              "1     0.236364     0.421053        0.74        0.55  ...  0.0  0.0  0.0  0.0   \n",
              "2     0.000000     0.192982        0.85        0.47  ...  0.0  0.0  0.0  0.0   \n",
              "3     0.472727     0.298246        0.44        0.37  ...  0.0  0.0  0.0  0.0   \n",
              "4     0.200000     0.228070        1.00        1.00  ...  0.0  0.0  0.0  0.0   \n",
              "\n",
              "   SSE  SSW   SW    W  WNW  WSW  \n",
              "0  0.0  0.0  0.0  0.0  0.0  0.0  \n",
              "1  0.0  0.0  0.0  0.0  0.0  0.0  \n",
              "2  0.0  0.0  1.0  0.0  0.0  0.0  \n",
              "3  0.0  0.0  0.0  0.0  0.0  0.0  \n",
              "4  0.0  0.0  0.0  0.0  0.0  0.0  \n",
              "\n",
              "[5 rows x 118 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3674facf-4c60-4c3b-9942-8c67e5a07bd3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>MinTemp</th>\n",
              "      <th>MaxTemp</th>\n",
              "      <th>Rainfall</th>\n",
              "      <th>Evaporation</th>\n",
              "      <th>Sunshine</th>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <th>WindSpeed9am</th>\n",
              "      <th>WindSpeed3pm</th>\n",
              "      <th>Humidity9am</th>\n",
              "      <th>Humidity3pm</th>\n",
              "      <th>...</th>\n",
              "      <th>NNW</th>\n",
              "      <th>NW</th>\n",
              "      <th>S</th>\n",
              "      <th>SE</th>\n",
              "      <th>SSE</th>\n",
              "      <th>SSW</th>\n",
              "      <th>SW</th>\n",
              "      <th>W</th>\n",
              "      <th>WNW</th>\n",
              "      <th>WSW</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.675743</td>\n",
              "      <td>0.538752</td>\n",
              "      <td>0.0625</td>\n",
              "      <td>0.229358</td>\n",
              "      <td>0.503448</td>\n",
              "      <td>0.356589</td>\n",
              "      <td>0.563636</td>\n",
              "      <td>0.491228</td>\n",
              "      <td>0.74</td>\n",
              "      <td>0.73</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.440594</td>\n",
              "      <td>0.544423</td>\n",
              "      <td>0.0625</td>\n",
              "      <td>0.073394</td>\n",
              "      <td>0.751724</td>\n",
              "      <td>0.325581</td>\n",
              "      <td>0.236364</td>\n",
              "      <td>0.421053</td>\n",
              "      <td>0.74</td>\n",
              "      <td>0.55</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.480198</td>\n",
              "      <td>0.510397</td>\n",
              "      <td>0.4375</td>\n",
              "      <td>0.055046</td>\n",
              "      <td>0.662069</td>\n",
              "      <td>0.155039</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.192982</td>\n",
              "      <td>0.85</td>\n",
              "      <td>0.47</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.688119</td>\n",
              "      <td>0.655955</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.422018</td>\n",
              "      <td>0.758621</td>\n",
              "      <td>0.286822</td>\n",
              "      <td>0.472727</td>\n",
              "      <td>0.298246</td>\n",
              "      <td>0.44</td>\n",
              "      <td>0.37</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.599010</td>\n",
              "      <td>0.423440</td>\n",
              "      <td>1.0000</td>\n",
              "      <td>0.215596</td>\n",
              "      <td>0.579310</td>\n",
              "      <td>0.108527</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>0.228070</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 118 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3674facf-4c60-4c3b-9942-8c67e5a07bd3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3674facf-4c60-4c3b-9942-8c67e5a07bd3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3674facf-4c60-4c3b-9942-8c67e5a07bd3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-60561cba-4233-43de-845b-2986cb1a6fe5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-60561cba-4233-43de-845b-2986cb1a6fe5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-60561cba-4233-43de-845b-2986cb1a6fe5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "x_train"
            }
          },
          "metadata": {},
          "execution_count": 154
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.shape"
      ],
      "metadata": {
        "id": "CvtUF2bzpYJz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a0bbcaf9-6c64-4194-cc2e-687b6693798b"
      },
      "execution_count": 155,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(116368, 118)"
            ]
          },
          "metadata": {},
          "execution_count": 155
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test.shape"
      ],
      "metadata": {
        "id": "-nRT9JTDpaYP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e105214-8ef8-4dd1-e839-60460a3a53e1"
      },
      "execution_count": 156,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(29092, 118)"
            ]
          },
          "metadata": {},
          "execution_count": 156
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "m8KQK5qmPbjb",
        "outputId": "ac7a24ab-e78c-490d-b15e-4f6ec1a581dc"
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             MinTemp        MaxTemp       Rainfall    Evaporation  \\\n",
              "count  116368.000000  116368.000000  116368.000000  116368.000000   \n",
              "mean        0.512133       0.529359       0.209625       0.233640   \n",
              "std         0.157596       0.133940       0.369223       0.128450   \n",
              "min         0.000000       0.000000       0.000000       0.000000   \n",
              "25%         0.400990       0.431002       0.000000       0.183486   \n",
              "50%         0.507426       0.517958       0.000000       0.215596   \n",
              "75%         0.626238       0.623819       0.187500       0.238532   \n",
              "max         1.000000       1.000000       1.000000       1.000000   \n",
              "\n",
              "            Sunshine  WindGustSpeed   WindSpeed9am   WindSpeed3pm  \\\n",
              "count  116368.000000  116368.000000  116368.000000  116368.000000   \n",
              "mean        0.550516       0.263427       0.255080       0.327850   \n",
              "std         0.190458       0.101767       0.160647       0.152642   \n",
              "min         0.000000       0.000000       0.000000       0.000000   \n",
              "25%         0.565517       0.193798       0.127273       0.228070   \n",
              "50%         0.579310       0.255814       0.236364       0.333333   \n",
              "75%         0.593103       0.310078       0.345455       0.421053   \n",
              "max         1.000000       1.000000       1.000000       1.000000   \n",
              "\n",
              "         Humidity9am    Humidity3pm  ...            NNW             NW  \\\n",
              "count  116368.000000  116368.000000  ...  116368.000000  116368.000000   \n",
              "mean        0.689507       0.516058  ...       0.054078       0.059123   \n",
              "std         0.188114       0.204400  ...       0.226173       0.235855   \n",
              "min         0.000000       0.000000  ...       0.000000       0.000000   \n",
              "25%         0.570000       0.370000  ...       0.000000       0.000000   \n",
              "50%         0.700000       0.520000  ...       0.000000       0.000000   \n",
              "75%         0.830000       0.650000  ...       0.000000       0.000000   \n",
              "max         1.000000       1.000000  ...       1.000000       1.000000   \n",
              "\n",
              "                   S             SE            SSE            SSW  \\\n",
              "count  116368.000000  116368.000000  116368.000000  116368.000000   \n",
              "mean        0.068447       0.103723       0.065224       0.056055   \n",
              "std         0.252512       0.304902       0.246922       0.230029   \n",
              "min         0.000000       0.000000       0.000000       0.000000   \n",
              "25%         0.000000       0.000000       0.000000       0.000000   \n",
              "50%         0.000000       0.000000       0.000000       0.000000   \n",
              "75%         0.000000       0.000000       0.000000       0.000000   \n",
              "max         1.000000       1.000000       1.000000       1.000000   \n",
              "\n",
              "                  SW              W            WNW            WSW  \n",
              "count  116368.000000  116368.000000  116368.000000  116368.000000  \n",
              "mean        0.064786       0.069323       0.060309       0.064958  \n",
              "std         0.246149       0.254004       0.238059       0.246452  \n",
              "min         0.000000       0.000000       0.000000       0.000000  \n",
              "25%         0.000000       0.000000       0.000000       0.000000  \n",
              "50%         0.000000       0.000000       0.000000       0.000000  \n",
              "75%         0.000000       0.000000       0.000000       0.000000  \n",
              "max         1.000000       1.000000       1.000000       1.000000  \n",
              "\n",
              "[8 rows x 118 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2dca6900-597a-4469-81dd-b286b12e3c91\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>MinTemp</th>\n",
              "      <th>MaxTemp</th>\n",
              "      <th>Rainfall</th>\n",
              "      <th>Evaporation</th>\n",
              "      <th>Sunshine</th>\n",
              "      <th>WindGustSpeed</th>\n",
              "      <th>WindSpeed9am</th>\n",
              "      <th>WindSpeed3pm</th>\n",
              "      <th>Humidity9am</th>\n",
              "      <th>Humidity3pm</th>\n",
              "      <th>...</th>\n",
              "      <th>NNW</th>\n",
              "      <th>NW</th>\n",
              "      <th>S</th>\n",
              "      <th>SE</th>\n",
              "      <th>SSE</th>\n",
              "      <th>SSW</th>\n",
              "      <th>SW</th>\n",
              "      <th>W</th>\n",
              "      <th>WNW</th>\n",
              "      <th>WSW</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "      <td>116368.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.512133</td>\n",
              "      <td>0.529359</td>\n",
              "      <td>0.209625</td>\n",
              "      <td>0.233640</td>\n",
              "      <td>0.550516</td>\n",
              "      <td>0.263427</td>\n",
              "      <td>0.255080</td>\n",
              "      <td>0.327850</td>\n",
              "      <td>0.689507</td>\n",
              "      <td>0.516058</td>\n",
              "      <td>...</td>\n",
              "      <td>0.054078</td>\n",
              "      <td>0.059123</td>\n",
              "      <td>0.068447</td>\n",
              "      <td>0.103723</td>\n",
              "      <td>0.065224</td>\n",
              "      <td>0.056055</td>\n",
              "      <td>0.064786</td>\n",
              "      <td>0.069323</td>\n",
              "      <td>0.060309</td>\n",
              "      <td>0.064958</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.157596</td>\n",
              "      <td>0.133940</td>\n",
              "      <td>0.369223</td>\n",
              "      <td>0.128450</td>\n",
              "      <td>0.190458</td>\n",
              "      <td>0.101767</td>\n",
              "      <td>0.160647</td>\n",
              "      <td>0.152642</td>\n",
              "      <td>0.188114</td>\n",
              "      <td>0.204400</td>\n",
              "      <td>...</td>\n",
              "      <td>0.226173</td>\n",
              "      <td>0.235855</td>\n",
              "      <td>0.252512</td>\n",
              "      <td>0.304902</td>\n",
              "      <td>0.246922</td>\n",
              "      <td>0.230029</td>\n",
              "      <td>0.246149</td>\n",
              "      <td>0.254004</td>\n",
              "      <td>0.238059</td>\n",
              "      <td>0.246452</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.400990</td>\n",
              "      <td>0.431002</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.183486</td>\n",
              "      <td>0.565517</td>\n",
              "      <td>0.193798</td>\n",
              "      <td>0.127273</td>\n",
              "      <td>0.228070</td>\n",
              "      <td>0.570000</td>\n",
              "      <td>0.370000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.507426</td>\n",
              "      <td>0.517958</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.215596</td>\n",
              "      <td>0.579310</td>\n",
              "      <td>0.255814</td>\n",
              "      <td>0.236364</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.700000</td>\n",
              "      <td>0.520000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.626238</td>\n",
              "      <td>0.623819</td>\n",
              "      <td>0.187500</td>\n",
              "      <td>0.238532</td>\n",
              "      <td>0.593103</td>\n",
              "      <td>0.310078</td>\n",
              "      <td>0.345455</td>\n",
              "      <td>0.421053</td>\n",
              "      <td>0.830000</td>\n",
              "      <td>0.650000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 118 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2dca6900-597a-4469-81dd-b286b12e3c91')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2dca6900-597a-4469-81dd-b286b12e3c91 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2dca6900-597a-4469-81dd-b286b12e3c91');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5e7fc1ba-8bbb-4573-beec-023c0b22ad4f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5e7fc1ba-8bbb-4573-beec-023c0b22ad4f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5e7fc1ba-8bbb-4573-beec-023c0b22ad4f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 158
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Training"
      ],
      "metadata": {
        "id": "L_f-eTwQO4Bp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_train.fillna(y_train.mode()[0], inplace=True)\n",
        "y_test.fillna(y_train.mode()[0], inplace=True)"
      ],
      "metadata": {
        "id": "MYoJyIKSPBaU"
      },
      "execution_count": 157,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# train a logistic regression model on the training set\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "\n",
        "# instantiate the model\n",
        "logreg = LogisticRegression(solver='liblinear', random_state=0)\n",
        "\n",
        "\n",
        "# fit the model\n",
        "logreg.fit(x_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "9_Tf6ODaPyq9",
        "outputId": "1b85a2b1-f6d9-4b41-c658-8f17146d4eba"
      },
      "execution_count": 166,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(random_state=0, solver='liblinear')"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-4 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-4 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-4 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-4 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-4 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=0, solver=&#x27;liblinear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(random_state=0, solver=&#x27;liblinear&#x27;)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 166
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Predict the Result\n"
      ],
      "metadata": {
        "id": "rHppVMMWQIRX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_test = logreg.predict(x_test)\n",
        "\n",
        "y_pred_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yCHrO26qRWxu",
        "outputId": "ed171969-36b3-472a-94c9-6b87014a1199"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['No', 'No', 'No', ..., 'Yes', 'No', 'No'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 168
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# probability of getting output as 0 - no rain\n",
        "\n",
        "logreg.predict_proba(x_test)[:,0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K_h13w50RcH1",
        "outputId": "ab445371-a2c4-476e-a196-56dac8a09e59"
      },
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.83215823, 0.74551076, 0.79860387, ..., 0.42025444, 0.6575465 ,\n",
              "       0.96954917])"
            ]
          },
          "metadata": {},
          "execution_count": 170
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# probability of getting output as 1 - rain\n",
        "\n",
        "logreg.predict_proba(x_test)[:,1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7cTdTIvvR9bS",
        "outputId": "93538b02-7b28-420b-db21-8750165113ad"
      },
      "execution_count": 173,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.16784177, 0.25448924, 0.20139613, ..., 0.57974556, 0.3424535 ,\n",
              "       0.03045083])"
            ]
          },
          "metadata": {},
          "execution_count": 173
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Check Accuracy Score"
      ],
      "metadata": {
        "id": "-RDVtGQbSOwv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "print('Model accuracy score: {0:0.4f}'. format(accuracy_score(y_test, y_pred_test)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ztK6i20vSVbI",
        "outputId": "f7f70ac4-5131-455b-e6ff-f376f94cb7d2"
      },
      "execution_count": 174,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model accuracy score: 0.8484\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Checking Overfitting and Underfitting"
      ],
      "metadata": {
        "id": "9JRguPgzSwo2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# print the scores on training and test set\n",
        "\n",
        "print('Training set score: {:.4f}'.format(logreg.score(x_train, y_train)))\n",
        "\n",
        "print('Test set score: {:.4f}'.format(logreg.score(x_test, y_test)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TlYogwODUnHr",
        "outputId": "336fc160-53c7-4e01-e391-4ac4b85a8ac3"
      },
      "execution_count": 178,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training set score: 0.8488\n",
            "Test set score: 0.8484\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "J19H3Q0cVWix",
        "outputId": "3e4adbe0-09ed-4333-886b-cf1c2578b8a7"
      },
      "execution_count": 179,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RainTomorrow\n",
              "No     22726\n",
              "Yes     6366\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RainTomorrow</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>22726</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>6366</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 179
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# check null accuracy score\n",
        "\n",
        "null_accuracy = (22067/(22067+6372))\n",
        "\n",
        "print('Null accuracy score: {0:0.4f}'. format(null_accuracy))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2UYlP3fpVlDm",
        "outputId": "7862094f-a2a7-4751-9980-86a96b8e79c5"
      },
      "execution_count": 181,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Null accuracy score: 0.7759\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Confusion Matrix"
      ],
      "metadata": {
        "id": "4ntJlUE0WCBw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the Confusion Matrix and slice it into four pieces\n",
        "\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "cm = confusion_matrix(y_test, y_pred_test)\n",
        "\n",
        "print('Confusion matrix\\n\\n', cm)\n",
        "\n",
        "print('\\nTrue Positives(TP) = ', cm[0,0])\n",
        "\n",
        "print('\\nTrue Negatives(TN) = ', cm[1,1])\n",
        "\n",
        "print('\\nFalse Positives(FP) = ', cm[0,1])\n",
        "\n",
        "print('\\nFalse Negatives(FN) = ', cm[1,0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3S2JTODtWMJV",
        "outputId": "6c5bd8fe-2265-45a3-959e-ac4c95029fa6"
      },
      "execution_count": 182,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion matrix\n",
            "\n",
            " [[21543  1183]\n",
            " [ 3227  3139]]\n",
            "\n",
            "True Positives(TP) =  21543\n",
            "\n",
            "True Negatives(TN) =  3139\n",
            "\n",
            "False Positives(FP) =  1183\n",
            "\n",
            "False Negatives(FN) =  3227\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t7MnbcupY-RP",
        "outputId": "7b45cf0a-06c5-4b4e-8165-adcb0647ff2b"
      },
      "execution_count": 184,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(29092, 118)"
            ]
          },
          "metadata": {},
          "execution_count": 184
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# visualize confusion matrix with seaborn heatmap\n",
        "\n",
        "cm_matrix = pd.DataFrame(data=cm, columns=['Actual Positive:1', 'Actual Negative:0'],\n",
        "                                 index=['Predict Negative:0', 'Predict Positive:1',])\n",
        "\n",
        "sns.heatmap(cm_matrix, annot=True, fmt='d', cmap='YlGnBu')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "qqefrK5XZDEg",
        "outputId": "e00053d7-090b-4d3d-9eaf-14af36fced9f"
      },
      "execution_count": 186,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 186
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}